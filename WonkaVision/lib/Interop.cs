using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using WonkaVision.lib.extra.Interop;

namespace WonkaVision.lib
{
    public class Interop
    {

        // MIDL strings from Vincent LE TOUX' "MakeMeEnterpriseAdmin"
        public static byte[] MIDL_ProcFormatStringx64 = new byte[] {
            0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x32,0x00,0x00,0x00,0x44,0x00,0x40,0x00,0x47,0x05,0x0a,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x0a,0x00,0x08,0x00,0x02,0x00,0x0b,0x00,0x10,0x00,0x18,0x00,0x13,0x20,0x18,0x00,0x3a,0x00,0x10,0x01,0x20,0x00,0x42,0x00,0x70,0x00,0x28,0x00,0x08,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x01,0x00,0x10,0x00,0x30,0xe0,0x00,0x00,0x00,0x00,0x38,0x00,0x40,0x00,0x44,0x02,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x18,0x01,0x00,0x00,0x4a,0x00,0x70,0x00,0x08,0x00,0x08,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x03,0x00,0x30,0x00,0x30,0x40,0x00,0x00,0x00,0x00,
            0x2c,0x00,0x24,0x00,0x47,0x06,0x0a,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x4e,0x00,0x48,0x00,0x08,0x00,0x08,0x00,0x0b,0x01,
            0x10,0x00,0x56,0x00,0x50,0x21,0x18,0x00,0x08,0x00,0x13,0x01,0x20,0x00,0xb6,0x02,0x70,0x00,0x28,0x00,0x08,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x04,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x05,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x06,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x07,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x08,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x09,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0a,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0b,0x00,
            0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0c,0x00,
            0x30,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x2c,0x00,0x24,0x00,0x47,0x06,0x0a,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x4e,0x00,
            0x48,0x00,0x08,0x00,0x08,0x00,0x0b,0x01,0x10,0x00,0xe0,0x05,0x50,0x21,0x18,0x00,0x08,0x00,0x13,0x21,0x20,0x00,0x42,0x06,0x70,0x00,0x28,0x00,0x08,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x0d,0x00,0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x0e,0x00,0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x0f,0x00,0x08,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0a,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x10,0x00,0x30,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x2c,0x00,0x24,0x00,0x47,0x06,0x0a,0x47,0x01,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x08,0x00,0x00,0x00,0x4e,0x00,0x48,0x00,0x08,0x00,0x08,0x00,0x0b,0x01,0x10,0x00,0xc4,0x06,0x50,0x21,0x18,0x00,0x08,0x00,0x13,0x41,0x20,0x00,
            0xf8,0x06,0x70,0x00,0x28,0x00,0x08,0x00,0x00
        };
        public static byte[] MIDL_TypeFormatStringx64 = new byte[] {
            0x00,0x00,0x12,0x00,0x08,0x00,0x1d,0x00,0x08,0x00,0x01,0x5b,0x15,0x03,0x10,0x00,0x08,0x06,0x06,0x4c,0x00,0xf1,0xff,0x5b,0x12,0x00,0x18,0x00,0x1b,0x00,
            0x01,0x00,0x09,0x00,0xfc,0xff,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x01,0x5b,0x17,0x03,0x04,0x00,0xe6,0xff,0x08,0x5b,0x11,0x14,
            0xdc,0xff,0x11,0x04,0x02,0x00,0x30,0xa0,0x00,0x00,0x11,0x04,0x02,0x00,0x30,0xe1,0x00,0x00,0x30,0x41,0x00,0x00,0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x00,
            0x08,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0xa8,0x00,0x05,0x00,0x04,0x00,0x00,0x00,0x66,0x01,0x05,0x00,0x00,0x00,
            0x7c,0x01,0x07,0x00,0x00,0x00,0x9e,0x01,0x08,0x00,0x00,0x00,0xbc,0x01,0x0a,0x00,0x00,0x00,0xec,0x01,0xff,0xff,0x15,0x07,0x18,0x00,0x0b,0x0b,0x0b,0x5b,
            0x1b,0x00,0x01,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x01,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,
            0x08,0x40,0x36,0x5b,0x12,0x20,0xdc,0xff,0x1a,0x03,0x18,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x4c,0x00,0xe4,0xff,0x5c,0x5b,0x21,0x03,0x00,0x00,0x19,0x00,
            0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x4c,0x00,0xca,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,0x1d,0x00,0x1c,0x00,0x02,0x5b,0x15,0x00,
            0x1c,0x00,0x4c,0x00,0xf4,0xff,0x5c,0x5b,0x1b,0x01,0x02,0x00,0x09,0x57,0xfc,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xa0,0x00,0x05,0x5b,
            0x17,0x03,0x38,0x00,0xe6,0xff,0x08,0x08,0x4c,0x00,0xd6,0xfe,0x4c,0x00,0xd2,0xff,0x08,0x5b,0x15,0x07,0x18,0x00,0x4c,0x00,0xc8,0xfe,0x0b,0x5b,0x1b,0x07,
            0x18,0x00,0x09,0x00,0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x4c,0x00,0xe0,0xff,0x5c,0x5b,0x17,0x07,0x10,0x00,0xe2,0xff,
            0x08,0x08,0x08,0x08,0x5c,0x5b,0x1b,0x03,0x04,0x00,0x09,0x00,0xfc,0xff,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x5b,0x17,0x03,
            0x0c,0x00,0xe6,0xff,0x08,0x08,0x08,0x5b,0x1a,0x07,0x70,0x00,0x00,0x00,0x1a,0x00,0x4c,0x00,0x74,0xfe,0x4c,0x00,0x70,0xfe,0x36,0x4c,0x00,0xed,0xfe,0x36,
            0x36,0x4c,0x00,0x4f,0xff,0x08,0x08,0x08,0x08,0x5b,0x11,0x00,0x7c,0xff,0x12,0x00,0xae,0xff,0x12,0x00,0xcc,0xff,0x1b,0x00,0x01,0x00,0x09,0x00,0xfc,0xff,
            0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x02,0x5b,0x17,0x03,0x04,0x00,0xe6,0xff,0x08,0x5b,0x1a,0x07,0x88,0x00,0x00,0x00,0x0c,0x00,
            0x4c,0x00,0x2a,0xfe,0x36,0x4c,0x00,0xa7,0xff,0x5b,0x11,0x00,0xe4,0xff,0x15,0x07,0x08,0x00,0x0b,0x5b,0x1a,0x07,0x60,0x00,0x00,0x00,0x1a,0x00,0x4c,0x00,
            0x0e,0xfe,0x4c,0x00,0x0a,0xfe,0x36,0x4c,0x00,0x87,0xfe,0x36,0x08,0x08,0x08,0x08,0x4c,0x00,0xde,0xff,0x5c,0x5b,0x11,0x00,0x16,0xff,0x12,0x00,0x48,0xff,
            0x1a,0x07,0xa8,0x00,0x00,0x00,0x12,0x00,0x4c,0x00,0xe6,0xfd,0x36,0x4c,0x00,0x63,0xff,0x36,0x36,0x4c,0x00,0xc5,0xfe,0x5b,0x11,0x00,0x9a,0xff,0x12,0x00,
            0x4a,0xff,0x12,0x00,0x46,0xff,0x1a,0x07,0x80,0x00,0x00,0x00,0x20,0x00,0x4c,0x00,0xc2,0xfd,0x4c,0x00,0xbe,0xfd,0x36,0x4c,0x00,0x3b,0xfe,0x36,0x08,0x08,
            0x08,0x08,0x4c,0x00,0x92,0xff,0x36,0x36,0x4c,0x00,0x94,0xfe,0x5c,0x5b,0x11,0x00,0xc4,0xfe,0x12,0x00,0xf6,0xfe,0x12,0x00,0x14,0xff,0x12,0x00,0x10,0xff,
            0x1a,0x07,0x88,0x00,0x00,0x00,0x22,0x00,0x4c,0x00,0x8c,0xfd,0x4c,0x00,0x88,0xfd,0x36,0x4c,0x00,0x05,0xfe,0x36,0x08,0x08,0x08,0x08,0x4c,0x00,0x5c,0xff,
            0x36,0x36,0x4c,0x00,0x5e,0xfe,0x08,0x40,0x5c,0x5b,0x11,0x00,0x8c,0xfe,0x12,0x00,0xbe,0xfe,0x12,0x00,0xdc,0xfe,0x12,0x00,0xd8,0xfe,0x11,0x0c,0x08,0x5c,
            0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x54,0x18,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0xa8,0x00,0x05,0x00,0x01,0x00,
            0x00,0x00,0x40,0x01,0x02,0x00,0x00,0x00,0x92,0x01,0x06,0x00,0x00,0x00,0x1e,0x02,0x07,0x00,0x00,0x00,0x54,0x02,0x09,0x00,0x00,0x00,0xb6,0x02,0xff,0xff,
            0x1b,0x00,0x01,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x02,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,
            0x08,0x40,0x36,0x5b,0x12,0x20,0xdc,0xff,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0xff,0xff,
            0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xca,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x40,
            0x36,0x5b,0x12,0x20,0xc8,0xff,0x1a,0x03,0x18,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x4c,0x00,0xe4,0xff,0x5c,0x5b,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,
            0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,
            0xca,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,0x1a,0x03,0x20,0x00,0x00,0x00,0x0a,0x00,0x36,0x08,
            0x40,0x4c,0x00,0xe3,0xff,0x5b,0x12,0x00,0x82,0xfd,0xb1,0x07,0x28,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x0b,0x4c,0x00,0x53,0xfc,0x0b,0x5c,0x5b,0x21,0x07,
            0x00,0x00,0x09,0x00,0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x4c,0x00,0xc8,0xff,0x5c,0x5b,0x1a,0x07,0x08,0x00,0xd2,0xff,0x00,0x00,0x08,0x40,0x5c,0x5b,0x1a,0x03,0x40,0x00,0x00,0x00,0x0c,0x00,
            0x36,0x4c,0x00,0x99,0xff,0x08,0x40,0x36,0x36,0x5b,0x12,0x00,0xec,0xff,0x12,0x00,0x00,0xfc,0x12,0x00,0xd8,0xff,0x1a,0x07,0x90,0x00,0x00,0x00,0x20,0x00,
            0x4c,0x00,0xf0,0xfb,0x4c,0x00,0xec,0xfb,0x36,0x4c,0x00,0x69,0xfc,0x4c,0x00,0x65,0xfc,0x36,0x4c,0x00,0xc8,0xfc,0x08,0x08,0x08,0x40,0x36,0x08,0x40,0x5b,
            0x12,0x00,0xf2,0xfc,0x12,0x00,0x24,0xfd,0x12,0x00,0xb2,0xff,0x1b,0x00,0x01,0x00,0x19,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x01,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x08,0x36,0x5b,0x12,0x20,0xdc,0xff,0x1a,0x03,0x10,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,
            0xe6,0xff,0x5c,0x5b,0x15,0x07,0x20,0x00,0x4c,0x00,0x8e,0xfb,0x0b,0x0b,0x5c,0x5b,0x1b,0x07,0x20,0x00,0x09,0x00,0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x10,0x00,0x4c,0x00,0xde,0xff,0x5c,0x5b,0x17,0x07,0x10,0x00,0xe2,0xff,0x08,0x08,0x08,0x08,0x5c,0x5b,0xb1,0x07,0x30,0x00,0x00,0x00,
            0x00,0x00,0x0b,0x4c,0x00,0xf7,0xfe,0x5b,0x1a,0x07,0x58,0x00,0x00,0x00,0x10,0x00,0x36,0x08,0x40,0x4c,0x00,0x3f,0xfe,0x08,0x40,0x4c,0x00,0xdf,0xff,0x5b,
            0x12,0x00,0x5c,0xfc,0x21,0x07,0x00,0x00,0x19,0x00,0x94,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc0,0xff,0x5c,0x5b,0x1a,0x07,0xa8,0x00,0x00,0x00,0x26,0x00,0x4c,0x00,0x06,0xfb,0x4c,0x00,
            0x02,0xfb,0x36,0x4c,0x00,0x7f,0xfb,0x4c,0x00,0x7b,0xfb,0x36,0x4c,0x00,0xde,0xfb,0x08,0x08,0x08,0x40,0x36,0x08,0x08,0x08,0x08,0x36,0x08,0x40,0x5c,0x5b,
            0x12,0x00,0x02,0xfc,0x12,0x00,0x70,0xff,0x12,0x00,0xc2,0xfe,0x12,0x20,0x9c,0xff,0x1a,0x03,0x18,0x00,0x00,0x00,0x00,0x00,0x08,0x0d,0x4c,0x00,0x16,0xff,
            0x5c,0x5b,0xb1,0x07,0x48,0x00,0x00,0x00,0x00,0x00,0x0b,0x4c,0x00,0x59,0xfe,0x08,0x08,0x08,0x40,0x0b,0x5c,0x5b,0x1a,0x07,0x70,0x00,0x00,0x00,0x10,0x00,
            0x36,0x08,0x40,0x4c,0x00,0x9b,0xfd,0x08,0x40,0x4c,0x00,0xd9,0xff,0x5b,0x12,0x00,0xb8,0xfb,0x21,0x07,0x00,0x00,0x19,0x00,0x94,0x00,0x11,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc0,0xff,0x5c,0x5b,
            0x1a,0x07,0xa8,0x00,0x00,0x00,0x26,0x00,0x4c,0x00,0x62,0xfa,0x4c,0x00,0x5e,0xfa,0x36,0x4c,0x00,0xdb,0xfa,0x4c,0x00,0xd7,0xfa,0x36,0x4c,0x00,0x3a,0xfb,
            0x08,0x08,0x08,0x40,0x36,0x08,0x08,0x08,0x08,0x36,0x08,0x40,0x5c,0x5b,0x12,0x00,0x5e,0xfb,0x12,0x00,0xcc,0xfe,0x12,0x00,0x1e,0xfe,0x12,0x20,0x9c,0xff,
            0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x00,0x08,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x01,0x00,0x01,0x00,
            0x00,0x00,0x2e,0x00,0xff,0xff,0x21,0x03,0x00,0x00,0x19,0x00,0x14,0x00,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0xff,0xff,0xff,0xff,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x5c,0x5b,0x1a,0x03,0x20,0x00,0x00,0x00,0x0a,0x00,0x08,0x08,0x08,0x08,
            0x08,0x08,0x36,0x5b,0x12,0x20,0xc4,0xff,0x11,0x04,0x02,0x00,0x2b,0x09,0x29,0x54,0x18,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x02,0x00,0x08,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x54,0x00,0xff,0xff,0x1a,0x03,0x18,0x00,0x00,0x00,0x08,0x00,0x08,0x40,0x36,0x36,0x5c,0x5b,0x12,0x08,
            0x25,0x5c,0x12,0x08,0x25,0x5c,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc4,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x40,0x36,0x5b,
            0x12,0x20,0xc8,0xff,0x1a,0x03,0x08,0x00,0x00,0x00,0x04,0x00,0x36,0x5b,0x12,0x00,0xe4,0xff,0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x00,0x08,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0xff,0xff,0x1a,0x03,0x10,0x00,0x00,0x00,
            0x06,0x00,0x36,0x08,0x40,0x5b,0x12,0x08,0x25,0x5c,0x11,0x04,0x02,0x00,0x2b,0x09,0x29,0x54,0x18,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x02,0x00,0x10,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x64,0x00,0x02,0x00,0x00,0x00,0xd8,0x00,0x03,0x00,0x00,0x00,0x4c,0x01,0xff,0xff,0xff,0xff,
            0x94,0x01,0xff,0xff,0x1a,0x03,0x30,0x00,0x00,0x00,0x0a,0x00,0x36,0x36,0x36,0x36,0x36,0x08,0x08,0x5b,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,
            0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,
            0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xb6,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,
            0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,0x1a,0x03,0x88,0x00,0x00,0x00,0x1e,0x00,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x08,0x08,0x08,0x4c,0x00,0x70,0xf8,
            0x4c,0x00,0x6c,0xf8,0x4c,0x00,0x68,0xf8,0x4c,0x00,0x64,0xf8,0x40,0x5b,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,
            0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,
            0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0x9a,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,
            0x06,0x00,0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,0x1a,0x03,0x88,0x00,0x00,0x00,0x1e,0x00,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x08,0x08,0x08,0x08,0x4c,
            0x00,0xf5,0xf7,0x4c,0x00,0xf1,0xf7,0x4c,0x00,0xed,0xf7,0x4c,0x00,0xe9,0xf7,0x5b,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,
            0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x12,0x08,0x25,0x5c,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x10,0x27,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0x9a,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,
            0x00,0x00,0x06,0x00,0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,0x1a,0x03,0x20,0x00,0x00,0x00,0x0a,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x36,0x5b,0x12,0x08,
            0x25,0x5c,0x21,0x03,0x00,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc6,0xff,0x5c,0x5b,0x1a,0x03,0x10,0x00,0x00,0x00,0x06,0x00,0x08,0x40,0x36,0x5b,0x12,0x20,0xc8,0xff,
            0x00
        };
        public static byte[] MIDL_ProcFormatStringx86 = new byte[] {
            0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x32,0x00,0x00,0x00,0x44,0x00,0x40,0x00,0x47,0x05,0x08,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,
            0x04,0x00,0x02,0x00,0x0b,0x00,0x08,0x00,0x18,0x00,0x13,0x20,0x0c,0x00,0x3a,0x00,0x10,0x01,0x10,0x00,0x42,0x00,0x70,0x00,0x14,0x00,0x08,0x00,0x00,0x48,
            0x00,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x30,0xe0,0x00,0x00,0x00,0x00,0x38,0x00,0x40,0x00,0x44,0x02,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,
            0x00,0x00,0x4a,0x00,0x70,0x00,0x04,0x00,0x08,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,
            0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x03,0x00,0x18,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x2c,0x00,0x24,0x00,0x47,0x06,
            0x08,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x4e,0x00,0x48,0x00,0x04,0x00,0x08,0x00,0x0b,0x01,0x08,0x00,0x56,0x00,0x50,0x21,0x0c,0x00,
            0x08,0x00,0x13,0x01,0x10,0x00,0xbe,0x02,0x70,0x00,0x14,0x00,0x08,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x05,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x06,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,
            0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x07,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x08,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x09,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0a,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x0b,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,
            0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x2c,0x00,0x24,0x00,0x47,0x06,0x08,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x08,0x00,
            0x00,0x00,0x4e,0x00,0x48,0x00,0x04,0x00,0x08,0x00,0x0b,0x01,0x08,0x00,0xde,0x05,0x50,0x21,0x0c,0x00,0x08,0x00,0x13,0x21,0x10,0x00,0x46,0x06,0x70,0x00,
            0x14,0x00,0x08,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0d,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x0e,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x48,0x00,0x00,0x00,0x00,0x0f,0x00,0x04,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x08,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,
            0x00,0x00,0x00,0x00,0x10,0x00,0x18,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x2c,0x00,0x24,0x00,0x47,0x06,0x08,0x47,0x01,0x00,0x01,0x00,0x00,0x00,0x08,0x00,
            0x00,0x00,0x4e,0x00,0x48,0x00,0x04,0x00,0x08,0x00,0x0b,0x01,0x08,0x00,0xe6,0x06,0x50,0x21,0x0c,0x00,0x08,0x00,0x13,0x21,0x10,0x00,0x1e,0x07,0x70,0x00,
            0x14,0x00,0x08,0x00,0x00
        };
        public static byte[] MIDL_TypeFormatStringx86 = new byte[] {
            0x00,0x00,0x12,0x00,0x08,0x00,0x1d,0x00,0x08,0x00,0x01,0x5b,0x15,0x03,0x10,0x00,0x08,0x06,0x06,0x4c,0x00,0xf1,0xff,0x5b,0x12,0x00,0x18,0x00,0x1b,0x00,
            0x01,0x00,0x09,0x00,0xfc,0xff,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x01,0x5b,0x17,0x03,0x04,0x00,0xe6,0xff,0x08,0x5b,0x11,0x14,
            0xdc,0xff,0x11,0x04,0x02,0x00,0x30,0xa0,0x00,0x00,0x11,0x04,0x02,0x00,0x30,0xe1,0x00,0x00,0x30,0x41,0x00,0x00,0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x00,
            0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x88,0x00,0x05,0x00,0x04,0x00,0x00,0x00,0x64,0x01,0x05,0x00,0x00,0x00,
            0x7c,0x01,0x07,0x00,0x00,0x00,0xa0,0x01,0x08,0x00,0x00,0x00,0xc0,0x01,0x0a,0x00,0x00,0x00,0xf2,0x01,0xff,0xff,0x15,0x07,0x18,0x00,0x0b,0x0b,0x0b,0x5b,
            0x1b,0x00,0x01,0x00,0x19,0x00,0x04,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x01,0x5b,0x16,0x03,0x0c,0x00,0x4b,0x5c,0x46,0x5c,
            0x08,0x00,0x08,0x00,0x12,0x20,0xdc,0xff,0x5b,0x08,0x08,0x08,0x5c,0x5b,0x1b,0x03,0x0c,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x10,0x00,0x4b,0x5c,0x48,0x49,0x0c,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x08,0x00,0x12,0x20,0xb0,0xff,0x5b,0x4c,0x00,0xc1,0xff,0x5b,0x16,0x03,
            0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x20,0xc6,0xff,0x5b,0x08,0x08,0x5b,0x1d,0x00,0x1c,0x00,0x02,0x5b,0x15,0x00,0x1c,0x00,0x4c,0x00,
            0xf4,0xff,0x5c,0x5b,0x1b,0x01,0x02,0x00,0x09,0x57,0xfc,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xa0,0x00,0x05,0x5b,0x17,0x03,0x38,0x00,
            0xe6,0xff,0x08,0x08,0x4c,0x00,0xda,0xfe,0x4c,0x00,0xd2,0xff,0x08,0x5b,0x15,0x07,0x18,0x00,0x4c,0x00,0xcc,0xfe,0x0b,0x5b,0x1b,0x07,0x18,0x00,0x09,0x00,
            0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x4c,0x00,0xe0,0xff,0x5c,0x5b,0x17,0x07,0x10,0x00,0xe2,0xff,0x08,0x08,0x08,0x08,
            0x5c,0x5b,0x1b,0x03,0x04,0x00,0x09,0x00,0xfc,0xff,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x5b,0x17,0x03,0x0c,0x00,0xe6,0xff,
            0x08,0x08,0x08,0x5b,0xb1,0x07,0x60,0x00,0x00,0x00,0x1c,0x00,0x4c,0x00,0x78,0xfe,0x4c,0x00,0x74,0xfe,0x36,0x40,0x4c,0x00,0xf0,0xfe,0x36,0x36,0x4c,0x00,
            0x4a,0xff,0x08,0x08,0x08,0x08,0x5c,0x5b,0x11,0x00,0x7a,0xff,0x12,0x00,0xac,0xff,0x12,0x00,0xca,0xff,0x1b,0x00,0x01,0x00,0x09,0x00,0xfc,0xff,0x11,0x00,
            0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x02,0x5b,0x17,0x03,0x04,0x00,0xe6,0xff,0x08,0x5b,0xb1,0x07,0x78,0x00,0x00,0x00,0x0e,0x00,0x4c,0x00,
            0x2c,0xfe,0x36,0x40,0x4c,0x00,0xa4,0xff,0x5c,0x5b,0x11,0x00,0xe2,0xff,0x15,0x07,0x08,0x00,0x0b,0x5b,0xb1,0x07,0x60,0x00,0x00,0x00,0x1c,0x00,0x4c,0x00,
            0x0e,0xfe,0x4c,0x00,0x0a,0xfe,0x36,0x40,0x4c,0x00,0x86,0xfe,0x36,0x08,0x08,0x08,0x08,0x40,0x4c,0x00,0xdc,0xff,0x5c,0x5b,0x11,0x00,0x10,0xff,0x12,0x00,
            0x42,0xff,0xb1,0x07,0x88,0x00,0x00,0x00,0x14,0x00,0x4c,0x00,0xe4,0xfd,0x36,0x40,0x4c,0x00,0x5c,0xff,0x36,0x36,0x4c,0x00,0xba,0xfe,0x5c,0x5b,0x11,0x00,
            0x94,0xff,0x12,0x00,0x42,0xff,0x12,0x00,0x3e,0xff,0xb1,0x07,0x70,0x00,0x00,0x00,0x22,0x00,0x4c,0x00,0xbe,0xfd,0x4c,0x00,0xba,0xfd,0x36,0x40,0x4c,0x00,
            0x36,0xfe,0x36,0x08,0x08,0x08,0x08,0x40,0x4c,0x00,0x8c,0xff,0x36,0x36,0x4c,0x00,0x86,0xfe,0x5c,0x5b,0x11,0x00,0xba,0xfe,0x12,0x00,0xec,0xfe,0x12,0x00,
            0x0a,0xff,0x12,0x00,0x06,0xff,0x1a,0x07,0x78,0x00,0x00,0x00,0x24,0x00,0x4c,0x00,0x86,0xfd,0x4c,0x00,0x82,0xfd,0x36,0x40,0x4c,0x00,0xfe,0xfd,0x36,0x08,
            0x08,0x08,0x08,0x40,0x4c,0x00,0x54,0xff,0x36,0x36,0x4c,0x00,0x4e,0xfe,0x08,0x40,0x5c,0x5b,0x11,0x00,0x80,0xfe,0x12,0x00,0xb2,0xfe,0x12,0x00,0xd0,0xfe,
            0x12,0x00,0xcc,0xfe,0x11,0x0c,0x08,0x5c,0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x54,0x0c,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x02,0x00,0x90,0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x3e,0x01,0x02,0x00,0x00,0x00,0x80,0x01,0x06,0x00,0x00,0x00,0x14,0x02,0x07,0x00,0x00,0x00,0x4a,0x02,
            0x09,0x00,0x00,0x00,0xac,0x02,0xff,0xff,0x1b,0x00,0x01,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x02,0x5b,
            0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x20,0xdc,0xff,0x5b,0x08,0x08,0x5b,0x1b,0x03,0x08,0x00,0x19,0x00,0x04,0x00,0x11,0x00,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x4b,0x5c,0x48,0x49,0x08,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x04,0x00,0x12,0x20,0xb2,0xff,0x5b,0x4c,
            0x00,0xc3,0xff,0x5b,0x16,0x03,0x0c,0x00,0x4b,0x5c,0x46,0x5c,0x08,0x00,0x08,0x00,0x12,0x20,0xc6,0xff,0x5b,0x08,0x08,0x08,0x5c,0x5b,0x1b,0x03,0x0c,0x00,
            0x19,0x00,0x0c,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x4b,0x5c,0x48,0x49,0x0c,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x08,0x00,
            0x12,0x20,0x9a,0xff,0x5b,0x4c,0x00,0xc1,0xff,0x5b,0xb1,0x07,0x28,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x0b,0x4c,0x00,0x71,0xfc,0x0b,0x5c,0x5b,0x21,0x07,
            0x00,0x00,0x09,0x00,0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x4c,0x00,0xc8,0xff,0x5c,0x5b,0x1a,0x07,0x08,0x00,0xd2,0xff,0x00,0x00,0x08,0x40,0x5c,0x5b,0x16,0x03,0x20,0x00,0x4b,0x5c,0x46,0x5c,
            0x00,0x00,0x00,0x00,0x12,0x00,0xf2,0xff,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x00,0x3a,0xfd,0x46,0x5c,0x10,0x00,0x10,0x00,0x12,0x20,0x6a,0xff,0x46,0x5c,
            0x18,0x00,0x18,0x00,0x12,0x00,0x0a,0xfc,0x46,0x5c,0x1c,0x00,0x1c,0x00,0x12,0x00,0xbe,0xff,0x5b,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x5b,0xb1,0x07,
            0x78,0x00,0x00,0x00,0x20,0x00,0x4c,0x00,0xea,0xfb,0x4c,0x00,0xe6,0xfb,0x36,0x40,0x4c,0x00,0x62,0xfc,0x4c,0x00,0x5e,0xfc,0x36,0x4c,0x00,0xb9,0xfc,0x08,
            0x08,0x08,0x36,0x08,0x5c,0x5b,0x12,0x00,0xe8,0xfc,0x12,0x00,0x1a,0xfd,0x12,0x00,0x8e,0xff,0x1b,0x00,0x01,0x00,0x19,0x00,0x04,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x5b,0x16,0x03,0x0c,0x00,0x4b,0x5c,0x46,0x5c,0x08,0x00,0x08,0x00,0x12,0x20,0xdc,0xff,0x5b,0x08,0x08,0x08,
            0x5c,0x5b,0x15,0x07,0x20,0x00,0x4c,0x00,0x90,0xfb,0x0b,0x0b,0x5c,0x5b,0x1b,0x07,0x20,0x00,0x09,0x00,0xf8,0xff,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x10,0x00,0x4c,0x00,0xde,0xff,0x5c,0x5b,0x17,0x07,0x10,0x00,0xe2,0xff,0x08,0x08,0x08,0x08,0x5c,0x5b,0xb1,0x07,0x30,0x00,0x00,0x00,0x00,0x00,
            0x0b,0x4c,0x00,0xdb,0xfe,0x5b,0xb1,0x07,0x48,0x00,0x00,0x00,0x10,0x00,0x36,0x08,0x4c,0x00,0x4a,0xfe,0x08,0x40,0x4c,0x00,0xe0,0xff,0x5c,0x5b,0x12,0x00,
            0x5a,0xfc,0x21,0x07,0x00,0x00,0x19,0x00,0x80,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc0,0xff,0x5c,0x5b,0x1a,0x07,0x90,0x00,0x00,0x00,0x26,0x00,0x4c,0x00,0x08,0xfb,0x4c,0x00,0x04,0xfb,
            0x36,0x40,0x4c,0x00,0x80,0xfb,0x4c,0x00,0x7c,0xfb,0x36,0x4c,0x00,0xd7,0xfb,0x08,0x08,0x08,0x36,0x08,0x08,0x08,0x08,0x36,0x08,0x40,0x5c,0x5b,0x12,0x00,
            0x00,0xfc,0x12,0x00,0x70,0xff,0x12,0x00,0xa6,0xfe,0x12,0x20,0x9c,0xff,0x1a,0x03,0x14,0x00,0x00,0x00,0x00,0x00,0x08,0x0d,0x4c,0x00,0x1e,0xff,0x5c,0x5b,
            0xb1,0x07,0x48,0x00,0x00,0x00,0x00,0x00,0x0b,0x4c,0x00,0x3d,0xfe,0x08,0x08,0x08,0x40,0x0b,0x5c,0x5b,0xb1,0x07,0x60,0x00,0x00,0x00,0x10,0x00,0x36,0x08,
            0x4c,0x00,0xa6,0xfd,0x08,0x40,0x4c,0x00,0xda,0xff,0x5c,0x5b,0x12,0x00,0xb6,0xfb,0x21,0x07,0x00,0x00,0x19,0x00,0x80,0x00,0x11,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x10,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0xc0,0xff,0x5c,0x5b,0x1a,0x07,
            0x90,0x00,0x00,0x00,0x26,0x00,0x4c,0x00,0x64,0xfa,0x4c,0x00,0x60,0xfa,0x36,0x40,0x4c,0x00,0xdc,0xfa,0x4c,0x00,0xd8,0xfa,0x36,0x4c,0x00,0x33,0xfb,0x08,
            0x08,0x08,0x36,0x08,0x08,0x08,0x08,0x36,0x08,0x40,0x5c,0x5b,0x12,0x00,0x5c,0xfb,0x12,0x00,0xcc,0xfe,0x12,0x00,0x02,0xfe,0x12,0x20,0x9c,0xff,0x11,0x00,
            0x02,0x00,0x2b,0x09,0x29,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x1c,0x00,0x01,0x00,0x01,0x00,0x00,0x00,
            0x2e,0x00,0xff,0xff,0x1b,0x03,0x04,0x00,0x19,0x00,0x14,0x00,0x11,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x4b,0x5c,0x48,0x49,0x04,0x00,
            0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x5c,0x5b,0x16,0x03,0x1c,0x00,0x4b,0x5c,0x46,0x5c,0x18,0x00,0x18,0x00,0x12,0x20,
            0xc8,0xff,0x5b,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x5c,0x5b,0x11,0x04,0x02,0x00,0x2b,0x09,0x29,0x54,0x0c,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x6c,0x00,0xff,0xff,0x16,0x03,0x0c,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,
            0x12,0x08,0x25,0x5c,0x46,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x08,0x5c,0x5b,0x1b,0x03,0x0c,0x00,0x19,0x00,0x00,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4b,0x5c,0x48,0x49,0x0c,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x12,0x08,0x25,0x5c,0x08,0x00,
            0x08,0x00,0x12,0x08,0x25,0x5c,0x5b,0x4c,0x00,0xaf,0xff,0x5b,0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x20,0xbe,0xff,0x5b,0x08,
            0x08,0x5b,0x16,0x03,0x04,0x00,0x4b,0x5c,0x46,0x5c,0x00,0x00,0x00,0x00,0x12,0x00,0xde,0xff,0x5b,0x08,0x5c,0x5b,0x11,0x00,0x02,0x00,0x2b,0x09,0x29,0x00,
            0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0xff,0xff,0x16,0x03,
            0x08,0x00,0x4b,0x5c,0x46,0x5c,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x5b,0x11,0x04,0x02,0x00,0x2b,0x09,0x29,0x54,0x0c,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0xa4,0x00,0x02,0x00,0x00,0x00,0x76,0x01,0x03,0x00,
            0x00,0x00,0x4a,0x02,0xff,0xff,0xff,0xff,0x9e,0x02,0xff,0xff,0x16,0x03,0x1c,0x00,0x4b,0x5c,0x46,0x5c,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,
            0x04,0x00,0x04,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,
            0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x5c,0x5b,0x1b,0x03,0x1c,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x4b,0x5c,0x48,0x49,0x1c,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x04,0x00,0x04,0x00,
            0x12,0x08,0x25,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,0x25,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x5b,0x4c,
            0x00,0x75,0xff,0x5b,0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x20,0xa6,0xff,0x5b,0x08,0x08,0x5b,0x16,0x03,0x68,0x00,0x4b,0x5c,
            0x46,0x5c,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,0x25,0x5c,
            0x46,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x14,0x00,0x14,0x00,0x12,0x08,0x25,0x5c,
            0x46,0x5c,0x18,0x00,0x18,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x4c,0x00,0xc1,0xf7,0x4c,0x00,0xbd,0xf7,0x4c,
            0x00,0xb9,0xf7,0x4c,0x00,0xb5,0xf7,0x5b,0x1b,0x03,0x68,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x4b,0x5c,
            0x48,0x49,0x68,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x04,0x00,0x04,0x00,0x12,0x08,0x25,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,
            0x25,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x14,0x00,0x14,0x00,0x12,0x08,0x25,0x5c,0x18,0x00,0x18,0x00,
            0x12,0x08,0x25,0x5c,0x5b,0x4c,0x00,0x3f,0xff,0x5b,0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x20,0x96,0xff,0x5b,0x08,0x08,0x5b,
            0x16,0x03,0x6c,0x00,0x4b,0x5c,0x46,0x5c,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x08,0x00,
            0x08,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x14,0x00,
            0x14,0x00,0x12,0x08,0x25,0x5c,0x46,0x5c,0x18,0x00,0x18,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x4c,0x00,
            0xe8,0xf6,0x4c,0x00,0xe4,0xf6,0x4c,0x00,0xe0,0xf6,0x4c,0x00,0xdc,0xf6,0x5c,0x5b,0x1b,0x03,0x6c,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x10,0x27,0x00,0x00,0x4b,0x5c,0x48,0x49,0x6c,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x12,0x08,0x25,0x5c,0x04,0x00,0x04,0x00,0x12,0x08,
            0x25,0x5c,0x08,0x00,0x08,0x00,0x12,0x08,0x25,0x5c,0x0c,0x00,0x0c,0x00,0x12,0x08,0x25,0x5c,0x10,0x00,0x10,0x00,0x12,0x08,0x25,0x5c,0x14,0x00,0x14,0x00,
            0x12,0x08,0x25,0x5c,0x18,0x00,0x18,0x00,0x12,0x08,0x25,0x5c,0x5b,0x4c,0x00,0x3d,0xff,0x5b,0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,
            0x12,0x20,0x96,0xff,0x5b,0x08,0x08,0x5b,0x16,0x03,0x1c,0x00,0x4b,0x5c,0x46,0x5c,0x18,0x00,0x18,0x00,0x12,0x08,0x25,0x5c,0x5b,0x08,0x08,0x08,0x08,0x08,
            0x08,0x08,0x5c,0x5b,0x1b,0x03,0x1c,0x00,0x19,0x00,0x00,0x00,0x11,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x4b,0x5c,0x48,0x49,0x1c,0x00,
            0x00,0x00,0x01,0x00,0x18,0x00,0x18,0x00,0x12,0x08,0x25,0x5c,0x5b,0x4c,0x00,0xbd,0xff,0x5b,0x16,0x03,0x08,0x00,0x4b,0x5c,0x46,0x5c,0x04,0x00,0x04,0x00,
            0x12,0x20,0xc6,0xff,0x5b,0x08,0x08,0x5b,0x00
        };


        // ENUMS

        public enum KERB_KEY_USAGE
        {
            AS_REQ_PA_ENC_TIMESTAMP = 1,
            AS_REP_TGS_REP = 2,
            AS_REP_EP_SESSION_KEY = 3,
            TGS_REQ_ENC_AUTHOIRZATION_DATA = 4,
            TGS_REQ_PA_AUTHENTICATOR = 7,
            TGS_REP_EP_SESSION_KEY = 8,
            AP_REQ_AUTHENTICATOR = 11,
            KRB_PRIV_ENCRYPTED_PART = 13,
            KRB_CRED_ENCRYPTED_PART = 14,
            KRB_NON_KERB_SALT = 16,
            KRB_NON_KERB_CKSUM_SALT = 17,
            PA_S4U_X509_USER = 26
        }

        // from https://tools.ietf.org/html/rfc3961
        public enum KERB_ETYPE : Int32
        {
            des_cbc_crc = 1,
            des_cbc_md4 = 2,
            des_cbc_md5 = 3,
            des3_cbc_md5 = 5,
            des3_cbc_sha1 = 7,
            dsaWithSHA1_CmsOID = 9,
            md5WithRSAEncryption_CmsOID = 10,
            sha1WithRSAEncryption_CmsOID = 11,
            rc2CBC_EnvOID = 12,
            rsaEncryption_EnvOID = 13,
            rsaES_OAEP_ENV_OID = 14,
            des_ede3_cbc_Env_OID = 15,
            des3_cbc_sha1_kd = 16,
            aes128_cts_hmac_sha1 = 17,
            aes256_cts_hmac_sha1 = 18,
            rc4_hmac = 23,
            rc4_hmac_exp = 24,
            subkey_keymaterial = 65,
            old_exp = -135
        }

        // from https://tools.ietf.org/html/rfc4120#section-6.2
        public enum PRINCIPAL_TYPE : long
        {
            NT_UNKNOWN = 0,
            NT_PRINCIPAL = 1,
            NT_SRV_INST = 2,
            NT_SRV_HST = 3,
            NT_SRV_XHST = 4,
            NT_UID = 5,
            NT_X500_PRINCIPAL = 6,
            NT_SMTP_NAME = 7,
            NT_ENTERPRISE = 10
        }

        // from https://directory.apache.org/apacheds/gen-docs/2.0.0-M15/apidocs/src-html/org/apache/directory/shared/kerberos/codec/types/HostAddrType.html
        public enum HostAddressType : long
        {
            NULL = 0,
            ADDRTYPE_UNIX = 1,
            ADDRTYPE_INET = 2,
            ADDRTYPE_IMPLINK = 3,
            ADDRTYPE_PUP = 4,
            ADDRTYPE_CHAOS = 5,
            ADDRTYPE_XNS = 6,
            ADDRTYPE_IPX = 6,
            ADDRTYPE_OSI = 7,
            ADDRTYPE_ECMA = 8,
            ADDRTYPE_DATAKIT = 9,
            ADDRTYPE_CCITT = 10,
            ADDRTYPE_SNA = 11,
            ADDRTYPE_DECNET = 12,
            ADDRTYPE_DLI = 13,
            ADDRTYPE_LAT = 14,
            ADDRTYPE_HYLINK = 15,
            ADDRTYPE_APPLETALK = 16,
            ADDRTYPE_VOICEVIEW = 18,
            ADDRTYPE_FIREFOX = 19,
            ADDRTYPE_NETBIOS = 20,
            ADDRTYPE_BAN = 21,
            ADDRTYPE_ATM = 22,
            ADDRTYPE_INET6 = 24
        }

        // from https://tools.ietf.org/html/rfc4120#section-5.2.6
        // and https://github.com/apache/directory-kerby/blob/trunk/kerby-kerb/kerb-core/src/main/java/org/apache/kerby/kerberos/kerb/type/ad/AuthorizationType.java
        public enum AuthorizationDataType : long
        {
            AD_IF_RELEVANT = 1,
            AD_INTENDED_FOR_SERVER = 2,
            AD_INTENDED_FOR_APPLICATION_CLASS = 3,
            AD_KDCISSUED = 4,
            AD_AND_OR = 5,
            AD_MANDATORY_TICKET_EXTENSIONS = 6,
            AD_IN_TICKET_EXTENSIONS = 7,
            AD_MANDATORY_FOR_KDC = 8,
            AD_INITIAL_VERIFIED_CAS = 9,
            OSF_DCE = 64,
            SESAME = 65,
            AD_OSF_DCE_PKI_CERTID = 66,
            AD_CAMMAC = 96,
            AD_AUTHENTICATION_INDICATOR = 97,
            AD_WIN2K_PAC = 128,
            AD_ETYPE_NEGOTIATION = 129,
            KERB_AUTH_DATA_TOKEN_RESTRICTIONS = 141,
            KERB_LOCAL = 142,
            AD_AUTH_DATA_AP_OPTIONS = 143,
            AD_TOKEN = 256

        }

        public enum TransitedEncodingType : long
        {
            NULL = 0,
            DOMAIN_X500_COMPRESS = 1
        }

        // from https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/ec551137-c5e5-476a-9c89-e0029473c41b
        public enum LSAP_TOKEN_INFO_INTEGRITY_FLAGS : UInt32
        {
            FULL = 0,
            UAC_RESTRICTED = 1
        }

        public enum LSAP_TOKEN_INFO_INTEGRITY_TOKENIL : UInt32
        {
            UNTRUSTED = 0,
            LOW = 4096,
            MEDIUM = 8192,
            HIGH = 12288,
            SYSTEM = 16384,
            PROTECTED = 20480
        }

        public enum KERB_PROTOCOL_MESSAGE_TYPE : UInt32
        {
            KerbDebugRequestMessage = 0,
            KerbQueryTicketCacheMessage = 1,
            KerbChangeMachinePasswordMessage = 2,
            KerbVerifyPacMessage = 3,
            KerbRetrieveTicketMessage = 4,
            KerbUpdateAddressesMessage = 5,
            KerbPurgeTicketCacheMessage = 6,
            KerbChangePasswordMessage = 7,
            KerbRetrieveEncodedTicketMessage = 8,
            KerbDecryptDataMessage = 9,
            KerbAddBindingCacheEntryMessage = 10,
            KerbSetPasswordMessage = 11,
            KerbSetPasswordExMessage = 12,
            KerbVerifyCredentialsMessage = 13,
            KerbQueryTicketCacheExMessage = 14,
            KerbPurgeTicketCacheExMessage = 15,
            KerbRefreshSmartcardCredentialsMessage = 16,
            KerbAddExtraCredentialsMessage = 17,
            KerbQuerySupplementalCredentialsMessage = 18,
            KerbTransferCredentialsMessage = 19,
            KerbQueryTicketCacheEx2Message = 20,
            KerbSubmitTicketMessage = 21,
            KerbAddExtraCredentialsExMessage = 22,
            KerbQueryKdcProxyCacheMessage = 23,
            KerbPurgeKdcProxyCacheMessage = 24,
            KerbQueryTicketCacheEx3Message = 25,
            KerbCleanupMachinePkinitCredsMessage = 26,
            KerbAddBindingCacheEntryExMessage = 27,
            KerbQueryBindingCacheMessage = 28,
            KerbPurgeBindingCacheMessage = 29,
            KerbQueryDomainExtendedPoliciesMessage = 30,
            KerbQueryS4U2ProxyCacheMessage = 31
        }

        public enum LogonType : uint
        {
            Interactive = 2,        // logging on interactively.
            Network,                // logging using a network.
            Batch,                  // logon for a batch process.
            Service,                // logon for a service account.
            Proxy,                  // Not supported.
            Unlock,                 // Tattempt to unlock a workstation.
            NetworkCleartext,       // network logon with cleartext credentials
            NewCredentials,         // caller can clone its current token and specify new credentials for outbound connections
            RemoteInteractive,      // terminal server session that is both remote and interactive
            CachedInteractive,      // attempt to use the cached credentials without going out across the network
            CachedRemoteInteractive,// same as RemoteInteractive, except used internally for auditing purposes
            CachedUnlock            // attempt to unlock a workstation
        }

        public enum LOGON_PROVIDER
        {
            LOGON32_PROVIDER_DEFAULT,
            LOGON32_PROVIDER_WINNT35,
            LOGON32_PROVIDER_WINNT40,
            LOGON32_PROVIDER_WINNT50
        }

        public enum TOKEN_INFORMATION_CLASS
        {
            /// <summary>
            /// The buffer receives a TOKEN_USER structure that contains the user account of the token.
            /// </summary>
            TokenUser = 1,

            /// <summary>
            /// The buffer receives a TOKEN_GROUPS structure that contains the group accounts associated with the token.
            /// </summary>
            TokenGroups,

            /// <summary>
            /// The buffer receives a TOKEN_PRIVILEGES structure that contains the privileges of the token.
            /// </summary>
            TokenPrivileges,

            /// <summary>
            /// The buffer receives a TOKEN_OWNER structure that contains the default owner security identifier (SID) for newly created objects.
            /// </summary>
            TokenOwner,

            /// <summary>
            /// The buffer receives a TOKEN_PRIMARY_GROUP structure that contains the default primary group SID for newly created objects.
            /// </summary>
            TokenPrimaryGroup,

            /// <summary>
            /// The buffer receives a TOKEN_DEFAULT_DACL structure that contains the default DACL for newly created objects.
            /// </summary>
            TokenDefaultDacl,

            /// <summary>
            /// The buffer receives a TOKEN_SOURCE structure that contains the source of the token. TOKEN_QUERY_SOURCE access is needed to retrieve this information.
            /// </summary>
            TokenSource,

            /// <summary>
            /// The buffer receives a TOKEN_TYPE value that indicates whether the token is a primary or impersonation token.
            /// </summary>
            TokenType,

            /// <summary>
            /// The buffer receives a SECURITY_IMPERSONATION_LEVEL value that indicates the impersonation level of the token. If the access token is not an impersonation token, the function fails.
            /// </summary>
            TokenImpersonationLevel,

            /// <summary>
            /// The buffer receives a TOKEN_STATISTICS structure that contains various token statistics.
            /// </summary>
            TokenStatistics,

            /// <summary>
            /// The buffer receives a TOKEN_GROUPS structure that contains the list of restricting SIDs in a restricted token.
            /// </summary>
            TokenRestrictedSids,

            /// <summary>
            /// The buffer receives a DWORD value that indicates the Terminal Services session identifier that is associated with the token. 
            /// </summary>
            TokenSessionId,

            /// <summary>
            /// The buffer receives a TOKEN_GROUPS_AND_PRIVILEGES structure that contains the user SID, the group accounts, the restricted SIDs, and the authentication ID associated with the token.
            /// </summary>
            TokenGroupsAndPrivileges,

            /// <summary>
            /// Reserved.
            /// </summary>
            TokenSessionReference,

            /// <summary>
            /// The buffer receives a DWORD value that is nonzero if the token includes the SANDBOX_INERT flag.
            /// </summary>
            TokenSandBoxInert,

            /// <summary>
            /// Reserved.
            /// </summary>
            TokenAuditPolicy,

            /// <summary>
            /// The buffer receives a TOKEN_ORIGIN value. 
            /// </summary>
            TokenOrigin,

            /// <summary>
            /// The buffer receives a TOKEN_ELEVATION_TYPE value that specifies the elevation level of the token.
            /// </summary>
            TokenElevationType,

            /// <summary>
            /// The buffer receives a TOKEN_LINKED_TOKEN structure that contains a handle to another token that is linked to this token.
            /// </summary>
            TokenLinkedToken,

            /// <summary>
            /// The buffer receives a TOKEN_ELEVATION structure that specifies whether the token is elevated.
            /// </summary>
            TokenElevation,

            /// <summary>
            /// The buffer receives a DWORD value that is nonzero if the token has ever been filtered.
            /// </summary>
            TokenHasRestrictions,

            /// <summary>
            /// The buffer receives a TOKEN_ACCESS_INFORMATION structure that specifies security information contained in the token.
            /// </summary>
            TokenAccessInformation,

            /// <summary>
            /// The buffer receives a DWORD value that is nonzero if virtualization is allowed for the token.
            /// </summary>
            TokenVirtualizationAllowed,

            /// <summary>
            /// The buffer receives a DWORD value that is nonzero if virtualization is enabled for the token.
            /// </summary>
            TokenVirtualizationEnabled,

            /// <summary>
            /// The buffer receives a TOKEN_MANDATORY_LABEL structure that specifies the token's integrity level. 
            /// </summary>
            TokenIntegrityLevel,

            /// <summary>
            /// The buffer receives a DWORD value that is nonzero if the token has the UIAccess flag set.
            /// </summary>
            TokenUIAccess,

            /// <summary>
            /// The buffer receives a TOKEN_MANDATORY_POLICY structure that specifies the token's mandatory integrity policy.
            /// </summary>
            TokenMandatoryPolicy,

            /// <summary>
            /// The buffer receives the token's logon security identifier (SID).
            /// </summary>
            TokenLogonSid,

            /// <summary>
            /// The maximum value for this enumeration
            /// </summary>
            MaxTokenInfoClass
        }

        public enum SecBufferType
        {
            SECBUFFER_VERSION = 0,
            SECBUFFER_EMPTY = 0,
            SECBUFFER_DATA = 1,
            SECBUFFER_TOKEN = 2
        }

        public enum KERB_CHECKSUM_ALGORITHM
        {
            KERB_CHECKSUM_NONE = 0,
            KERB_CHECKSUM_RSA_MD4 = 2,
            KERB_CHECKSUM_RSA_MD5 = 7,
            KERB_CHECKSUM_HMAC_SHA1_96_AES128 = 15,
            KERB_CHECKSUM_HMAC_SHA1_96_AES256 = 16,
            KERB_CHECKSUM_DES_MAC = -133,
            KERB_CHECKSUM_HMAC_MD5 = -138,
        }

        // taken from https://github.com/tevora-threat/SharpView
        public enum ResourceScope : int
        {
            Connected = 1,
            GlobalNetwork,
            Remembered,
            Recent,
            Context
        };

        public enum ResourceType : int
        {
            Any = 0,
            Disk = 1,
            Print = 2,
            Reserved = 8,
        }

        public enum ResourceDisplaytype : int
        {
            Generic = 0x0,
            Domain = 0x01,
            Server = 0x02,
            Share = 0x03,
            File = 0x04,
            Group = 0x05,
            Network = 0x06,
            Root = 0x07,
            Shareadmin = 0x08,
            Directory = 0x09,
            Tree = 0x0a,
            Ndscontainer = 0x0b
        }


        public enum ATT
        {
            [Description("displayName")]
            ATT_RDN = 589825,
            ATT_OBJECT_SID = 589970,
            ATT_WHEN_CREATED = 131074,
            ATT_WHEN_CHANGED = 131075,
            ATT_SAM_ACCOUNT_NAME = 590045,
            ATT_USER_PRINCIPAL_NAME = 590480,
            ATT_SERVICE_PRINCIPAL_NAME = 590595,
            ATT_SID_HISTORY = 590433,
            ATT_USER_ACCOUNT_CONTROL = 589832,
            ATT_SAM_ACCOUNT_TYPE = 590126,
            ATT_LOGON_HOURS = 589888,
            ATT_LOGON_WORKSTATION = 589889,
            [Description("lastLogon")]
            ATT_LAST_LOGON = 589876,
            ATT_PWD_LAST_SET = 589920,
            ATT_ACCOUNT_EXPIRES = 589983,
            ATT_LOCKOUT_TIME = 590486,
            ATT_UNICODE_PWD = 589914,
            ATT_NT_PWD_HISTORY = 589918,
            ATT_DBCS_PWD = 589879,
            ATT_LM_PWD_HISTORY = 589984,
            ATT_SUPPLEMENTAL_CREDENTIALS = 589949,
            ATT_CURRENT_VALUE = 589851,
            ATT_TRUST_ATTRIBUTES = 590294,
            ATT_TRUST_AUTH_INCOMING = 589953,
            ATT_TRUST_AUTH_OUTGOING = 589959,
            ATT_TRUST_DIRECTION = 589956,
            ATT_TRUST_PARENT = 590295,
            ATT_TRUST_PARTNER = 589957,
            ATT_TRUST_TYPE = 589960,
        }
        public enum SEC_WINNT_AUTH_IDENTITY_FLAGS
        {
            ANSI = 1,
            UNICODE = 2,
        }

        // from https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes
        public enum SystemErrorCodes : int
        {
            ERROR_SUCCESS = 0,
            ERROR_ACCESS_DENIED = 5,
            ERROR_ALREADY_ASSIGNED = 85,
            ERROR_BAD_DEV_TYPE = 66,
            ERROR_BAD_DEVICE_PATH = 330,
            ERROR_BAD_DEVICE = 1200,
            ERROR_BAD_NETPATH = 53,
            ERROR_BAD_NET_NAME = 67,
            ERROR_BAD_PROFILE = 1206,
            ERROR_BAD_PROVIDER = 1204,
            ERROR_BAD_USERNAME = 2202,
            ERROR_BUSY_DRIVE = 142,
            ERROR_BUSY = 170,
            ERROR_CANCELLED = 1223,
            ERROR_CANNOT_OPEN_PROFILE = 1205,
            ERROR_DEVICE_ALREADY_REMEMBERED = 1202,
            ERROR_EXTENDED_ERROR = 1208,
            ERROR_INVALID_ADDRESS = 487,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_INVALID_PASSWORD = 86,
            ERROR_INVALID_PASSWORDNAME = 1216,
            ERROR_LOGON_FAILURE = 1326,
            ERROR_NO_NET_OR_BAD_PATH = 1203,
            ERROR_NO_NETWORK = 1222,
        }

        public enum HostMappedSPNs
        {
            alerter,
            appmgmt,
            browser,
            cifs,
            cisvc,
            clipsrv,
            dcom,
            dhcp,
            dmserver,
            dns,
            dnscache,
            eventlog,
            eventsystem,
            fax,
            http,
            ias,
            iisadmin,
            mcsvc,
            messenger,
            msdtc,
            msiserver,
            netdde,
            netddedsm,
            netlogon,
            netman,
            nmagent,
            oakley,
            plugplay,
            policyagent,
            protectedstorage,
            rasman,
            remoteaccess,
            replicator,
            rpc,
            rpclocator,
            rpcss,
            rsvp,
            samss,
            scardsvr,
            scesrv,
            schedule,
            scm,
            seclogon,
            snmp,
            spooler,
            tapisrv,
            time,
            trksvr,
            trkwks,
            ups,
            w3svc,
            wins,
            www
        }

        // FLAGS



        [Flags]
        public enum TicketFlags : UInt32
        {
            reserved = 2147483648,
            forwardable = 0x40000000,
            forwarded = 0x20000000,
            proxiable = 0x10000000,
            proxy = 0x08000000,
            may_postdate = 0x04000000,
            postdated = 0x02000000,
            invalid = 0x01000000,
            renewable = 0x00800000,
            initial = 0x00400000,
            pre_authent = 0x00200000,
            hw_authent = 0x00100000,
            ok_as_delegate = 0x00040000,
            name_canonicalize = 0x00010000,
            //cname_in_pa_data = 0x00040000,
            enc_pa_rep = 0x00010000,
            reserved1 = 0x00000001,
            empty = 0x00000000
        }

        // from https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/4df07fab-1bbc-452f-8e92-7853a3c7e380 section 2.2.1.12
        [Flags]
        public enum PacUserAccountControl : Int32
        {
            EMPTY = 0,
            ACCOUNTDISABLE = 1,
            HOMEDIR_REQUIRED = 2,
            PASSWD_NOTREQD = 4,
            TEMP_DUPLICATE_ACCOUNT = 8,
            NORMAL_ACCOUNT = 16,
            MNS_LOGON_ACCOUNT = 32,
            INTERDOMAIN_TRUST_ACCOUNT = 64,
            WORKSTATION_TRUST_ACCOUNT = 128,
            SERVER_TRUST_ACCOUNT = 256,
            DONT_EXPIRE_PASSWORD = 512,
            ACCOUNT_AUTO_LOCKED = 1024,
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 2048,
            SMARTCARD_REQUIRED = 4096,
            TRUSTED_FOR_DELEGATION = 8192,
            NOT_DELEGATED = 16384,
            USE_DES_KEY_ONLY = 32768,
            DONT_REQ_PREAUTH = 65536,
            PASSWORD_EXPIRED = 131072,
            TRUSTED_TO_AUTH_FOR_DELEGATION = 262144,
            NO_AUTH_DATA_REQUIRED = 524288,
            PARTIAL_SECRETS_ACCOUNT = 1048576,
            USE_AES_KEYS = 2097152
        }

        // from https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/69e86ccc-85e3-41b9-b514-7d969cd0ed73
        [Flags]
        public enum PacUserFlags : Int32
        {
            EXTRA_SIDS = 32,
            RESOURCE_GROUPS = 512
        }

        [Flags]
        public enum LDAPUserAccountControl : Int32
        {
            SCRIPT = 1,
            ACCOUNTDISABLE = 2,
            HOMEDIR_REQUIRED = 8,
            LOCKOUT = 16,
            PASSWD_NOTREQD = 32,
            PASSWD_CANT_CHANGE = 64,
            ENCRYPTED_TEXT_PWD_ALLOWED = 128,
            TEMP_DUPLICATE_ACCOUNT = 256,
            NORMAL_ACCOUNT = 512,
            INTERDOMAIN_TRUST_ACCOUNT = 2048,
            WORKSTATION_TRUST_ACCOUNT = 4096,
            SERVER_TRUST_ACCOUNT = 8192,
            DONT_EXPIRE_PASSWORD = 65536,
            MNS_LOGON_ACCOUNT = 131072,
            SMARTCARD_REQUIRED = 262144,
            TRUSTED_FOR_DELEGATION = 524288,
            NOT_DELEGATED = 1048576,
            USE_DES_KEY_ONLY = 2097152,
            DONT_REQ_PREAUTH = 4194304,
            PASSWORD_EXPIRED = 8388608,
            TRUSTED_TO_AUTH_FOR_DELEGATION = 16777216,
            NO_AUTH_DATA_REQUIRED = 33554432,
            PARTIAL_SECRETS_ACCOUNT = 67108864
        }

        [Flags]
        public enum KERB_CACHE_OPTIONS : UInt64
        {
            KERB_RETRIEVE_TICKET_DEFAULT = 0x0,
            KERB_RETRIEVE_TICKET_DONT_USE_CACHE = 0x1,
            KERB_RETRIEVE_TICKET_USE_CACHE_ONLY = 0x2,
            KERB_RETRIEVE_TICKET_USE_CREDHANDLE = 0x4,
            KERB_RETRIEVE_TICKET_AS_KERB_CRED = 0x8,
            KERB_RETRIEVE_TICKET_WITH_SEC_CRED = 0x10,
            KERB_RETRIEVE_TICKET_CACHE_TICKET = 0x20,
            KERB_RETRIEVE_TICKET_MAX_LIFETIME = 0x40,
        }

        [Flags]
        public enum DSGETDCNAME_FLAGS : uint
        {
            DS_FORCE_REDISCOVERY = 0x00000001,
            DS_DIRECTORY_SERVICE_REQUIRED = 0x00000010,
            DS_DIRECTORY_SERVICE_PREFERRED = 0x00000020,
            DS_GC_SERVER_REQUIRED = 0x00000040,
            DS_PDC_REQUIRED = 0x00000080,
            DS_BACKGROUND_ONLY = 0x00000100,
            DS_IP_REQUIRED = 0x00000200,
            DS_KDC_REQUIRED = 0x00000400,
            DS_TIMESERV_REQUIRED = 0x00000800,
            DS_WRITABLE_REQUIRED = 0x00001000,
            DS_GOOD_TIMESERV_PREFERRED = 0x00002000,
            DS_AVOID_SELF = 0x00004000,
            DS_ONLY_LDAP_NEEDED = 0x00008000,
            DS_IS_FLAT_NAME = 0x00010000,
            DS_IS_DNS_NAME = 0x00020000,
            DS_RETURN_DNS_NAME = 0x40000000,
            DS_RETURN_FLAT_NAME = 0x80000000
        }

        [Flags]
        public enum LdapSupportedEncryptionTypes : int
        {
            DES_CBC_CRC = 1,
            DES_CBC_MD5 = 2,
            RC4 = 4,
            AES128 = 8,
            AES256 = 16
        }

        // from https://download.samba.org/pub/samba/patches/security/samba-4.15.1-security-2021-11-09.patch
        [Flags]
        public enum PacAttribute : Int32
        {
            PAC_NOT_REQUESTED = 0x00000000,
            PAC_WAS_REQUESTED = 0x00000001,
            PAC_WAS_GIVEN_IMPLICITLY = 0x00000002
        }

        [Flags]
        public enum UpnDnsFlags : int
        {
            UPN_SET = 0,
            NO_UPN_SET = 1,
            EXTENDED = 2
        }

        [Flags]
        public enum LsaCacheFlags : UInt32
        {
            NONE = 0,
            PRIMARY = 1,
            DELEGATION = 2,
            FAST = 4
        }

        // STRUCTS

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_CHECKSUM
        {
            public int Type;
            public int Size;
            public int Flag;
            public IntPtr Initialize;
            public IntPtr Sum;
            public IntPtr Finalize;
            public IntPtr Finish;
            public IntPtr InitializeEx;
            public IntPtr unk0_null;
        }
        
        // // typedef struct _LSAP_TOKEN_INFO_INTEGRITY {
        //    unsigned long Flags;
        //    unsigned long TokenIL;
        //    unsigned char MachineID[32];  # KILE implements a 32-byte binary random string machine ID
        // }
        // LSAP_TOKEN_INFO_INTEGRITY,
        //   *PLSAP_TOKEN_INFO_INTEGRITY;
        public struct LSAP_TOKEN_INFO_INTEGRITY
        {
            public LSAP_TOKEN_INFO_INTEGRITY_FLAGS Flags;
            public LSAP_TOKEN_INFO_INTEGRITY_TOKENIL TokenIL;
            public byte[] machineID;
        }

        // From Vincent LE TOUX' "MakeMeEnterpriseAdmin"
        //  https://github.com/vletoux/MakeMeEnterpriseAdmin/blob/master/MakeMeEnterpriseAdmin.ps1#L1773-L1794
        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_ECRYPT
        {
            int Type0;
            public int BlockSize;
            int Type1;
            public int KeySize;
            public int Size;
            int unk2;
            int unk3;
            public IntPtr AlgName;
            public IntPtr Initialize;
            public IntPtr Encrypt;
            public IntPtr Decrypt;
            public IntPtr Finish;
            public IntPtr HashPassword;
            IntPtr RandomKey;
            IntPtr Control;
            IntPtr unk0_null;
            IntPtr unk1_null;
            IntPtr unk2_null;
        }

        public struct SYSTEMTIME
        {
            public ushort wYear, wMonth, wDayOfWeek, wDay,
               wHour, wMinute, wSecond, wMilliseconds;
        }

        // LSA structures

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_SUBMIT_TKT_REQUEST
        {
            public KERB_PROTOCOL_MESSAGE_TYPE MessageType;
            public LUID LogonId;
            public int Flags;
            public KERB_CRYPTO_KEY32 Key; // key to decrypt KERB_CRED
            public int KerbCredSize;
            public int KerbCredOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_PURGE_TKT_CACHE_REQUEST
        {
            public KERB_PROTOCOL_MESSAGE_TYPE MessageType;
            public LUID LogonId;
            LSA_STRING_IN ServerName;
            LSA_STRING_IN RealmName;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_CRYPTO_KEY32
        {
            public int KeyType;
            public int Length;
            public int Offset;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct LSA_STRING_IN
        {
            public ushort Length;
            public ushort MaximumLength;
            public string Buffer;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct LSA_STRING_OUT
        {
            public ushort Length;
            public ushort MaximumLength;
            public IntPtr Buffer;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct LSA_STRING
        {
            public UInt16 Length;
            public UInt16 MaximumLength;
            public String Buffer;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct UNICODE_STRING : IDisposable
        {
            public ushort Length;
            public ushort MaximumLength;
            public IntPtr buffer;

            public UNICODE_STRING(string s)
            {
                Length = (ushort)(s.Length * 2);
                MaximumLength = (ushort)(Length + 2);
                buffer = Marshal.StringToHGlobalUni(s);
            }

            public void Dispose()
            {
                Marshal.FreeHGlobal(buffer);
                buffer = IntPtr.Zero;
            }

            public override string ToString()
            {
                return Marshal.PtrToStringUni(buffer);
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_RETRIEVE_TKT_RESPONSE
        {
            public KERB_EXTERNAL_TICKET Ticket;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_EXTERNAL_TICKET
        {
            public IntPtr ServiceName;
            public IntPtr TargetName;
            public IntPtr ClientName;
            public LSA_STRING_OUT DomainName;
            public LSA_STRING_OUT TargetDomainName;
            public LSA_STRING_OUT AltTargetDomainName;
            public KERB_CRYPTO_KEY SessionKey;
            public UInt32 TicketFlags;
            public UInt32 Flags;
            public Int64 KeyExpirationTime;
            public Int64 StartTime;
            public Int64 EndTime;
            public Int64 RenewUntil;
            public Int64 TimeSkew;
            public Int32 EncodedTicketSize;
            public IntPtr EncodedTicket;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_CRYPTO_KEY
        {
            public Int32 KeyType;
            public Int32 Length;
            public IntPtr Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_RETRIEVE_TKT_REQUEST
        {
            public KERB_PROTOCOL_MESSAGE_TYPE MessageType;
            public LUID LogonId;
            public UNICODE_STRING TargetName;
            public UInt32 TicketFlags;
            public UInt32 CacheOptions;
            public Int32 EncryptionType;
            public SECURITY_HANDLE CredentialsHandle;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_QUERY_TKT_CACHE_REQUEST
        {
            public KERB_PROTOCOL_MESSAGE_TYPE MessageType;
            public LUID LogonId;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_QUERY_TKT_CACHE_RESPONSE
        {
            public KERB_PROTOCOL_MESSAGE_TYPE MessageType;
            public int CountOfTickets;
            public IntPtr Tickets;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_TICKET_CACHE_INFO
        {
            public LSA_STRING_OUT ServerName;
            public LSA_STRING_OUT RealmName;
            public Int64 StartTime;
            public Int64 EndTime;
            public Int64 RenewTime;
            public Int32 EncryptionType;
            public UInt32 TicketFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_TICKET_CACHE_INFO_EX
        {
            public LSA_STRING_OUT ClientName;
            public LSA_STRING_OUT ClientRealm;
            public LSA_STRING_OUT ServerName;
            public LSA_STRING_OUT ServerRealm;
            public Int64 StartTime;
            public Int64 EndTime;
            public Int64 RenewTime;
            public Int32 EncryptionType;
            public UInt32 TicketFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_TICKET_CACHE_INFO_EX2
        {
            public LSA_STRING_OUT ClientName;
            public LSA_STRING_OUT ClientRealm;
            public LSA_STRING_OUT ServerName;
            public LSA_STRING_OUT ServerRealm;
            public Int64 StartTime;
            public Int64 EndTime;
            public Int64 RenewTime;
            public Int32 EncryptionType;
            public UInt32 TicketFlags;

            public UInt32 SessionKeyType;
            public UInt32 BranchId;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_TICKET_CACHE_INFO_EX3
        {
            public LSA_STRING_OUT ClientName;
            public LSA_STRING_OUT ClientRealm;
            public LSA_STRING_OUT ServerName;
            public LSA_STRING_OUT ServerRealm;
            public Int64 StartTime;
            public Int64 EndTime;
            public Int64 RenewTime;
            public Int32 EncryptionType;
            public UInt32 TicketFlags;

            public UInt32 SessionKeyType;
            public UInt32 BranchId;

            public UInt32 CacheFlags;
            public LSA_STRING_OUT KdcCalled;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_EXTERNAL_NAME
        {
            public Int16 NameType;
            public UInt16 NameCount;

            [MarshalAs(UnmanagedType.ByValArray,
                SizeConst = 3)]
            public LSA_STRING_OUT[] Names;
            //public LSA_STRING_OUT[] Names;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SECURITY_LOGON_SESSION_DATA
        {
            public UInt32 Size;
            public LUID LoginID;
            public LSA_STRING_OUT Username;
            public LSA_STRING_OUT LoginDomain;
            public LSA_STRING_OUT AuthenticationPackage;
            public UInt32 LogonType;
            public UInt32 Session;
            public IntPtr PSiD;
            public UInt64 LoginTime;
            public LSA_STRING_OUT LogonServer;
            public LSA_STRING_OUT DnsDomainName;
            public LSA_STRING_OUT Upn;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SECURITY_ATTRIBUTES
        {
            public int Length;
            public IntPtr lpSecurityDescriptor;
            public bool bInheritHandle;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct TOKEN_STATISTICS
        {
            public LUID TokenId;
            public LUID AuthenticationId;
            public long ExpirationTime;
            public uint TokenType;
            public uint ImpersonationLevel;
            public uint DynamicCharged;
            public uint DynamicAvailable;
            public uint GroupCount;
            public uint PrivilegeCount;
            public LUID ModifiedId;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct TOKEN_ORIGIN
        {
            public LUID OriginatingLogonSession;
        }

        // the following are adapted from https://www.pinvoke.net/default.aspx/secur32.InitializeSecurityContext
        [StructLayout(LayoutKind.Sequential)]
        public struct SecHandle //=PCtxtHandle
        {
            IntPtr dwLower; // ULONG_PTR translates to IntPtr not to uint
            IntPtr dwUpper; // this is crucial for 64-Bit Platforms
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SecBuffer : IDisposable
        {
            public int cbBuffer;
            public int BufferType;
            public IntPtr pvBuffer;


            public SecBuffer(int bufferSize)
            {
                cbBuffer = bufferSize;
                BufferType = (int)SecBufferType.SECBUFFER_TOKEN;
                pvBuffer = Marshal.AllocHGlobal(bufferSize);
            }

            public SecBuffer(byte[] secBufferBytes)
            {
                cbBuffer = secBufferBytes.Length;
                BufferType = (int)SecBufferType.SECBUFFER_TOKEN;
                pvBuffer = Marshal.AllocHGlobal(cbBuffer);
                Marshal.Copy(secBufferBytes, 0, pvBuffer, cbBuffer);
            }

            public SecBuffer(byte[] secBufferBytes, SecBufferType bufferType)
            {
                cbBuffer = secBufferBytes.Length;
                BufferType = (int)bufferType;
                pvBuffer = Marshal.AllocHGlobal(cbBuffer);
                Marshal.Copy(secBufferBytes, 0, pvBuffer, cbBuffer);
            }

            public void Dispose()
            {
                if (pvBuffer != IntPtr.Zero)
                {
                    Marshal.FreeHGlobal(pvBuffer);
                    pvBuffer = IntPtr.Zero;
                }
            }
        }

        public struct MultipleSecBufferHelper
        {
            public byte[] Buffer;
            public SecBufferType BufferType;

            public MultipleSecBufferHelper(byte[] buffer, SecBufferType bufferType)
            {
                if (buffer == null || buffer.Length == 0)
                {
                    throw new ArgumentException("buffer cannot be null or 0 length");
                }

                Buffer = buffer;
                BufferType = bufferType;
            }
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct SecBufferDesc : IDisposable
        {

            public int ulVersion;
            public int cBuffers;
            public IntPtr pBuffers; //Point to SecBuffer

            public SecBufferDesc(int bufferSize)
            {
                ulVersion = (int)SecBufferType.SECBUFFER_VERSION;
                cBuffers = 1;
                SecBuffer ThisSecBuffer = new SecBuffer(bufferSize);
                pBuffers = Marshal.AllocHGlobal(Marshal.SizeOf(ThisSecBuffer));
                Marshal.StructureToPtr(ThisSecBuffer, pBuffers, false);
            }

            public SecBufferDesc(byte[] secBufferBytes)
            {
                ulVersion = (int)SecBufferType.SECBUFFER_VERSION;
                cBuffers = 1;
                SecBuffer ThisSecBuffer = new SecBuffer(secBufferBytes);
                pBuffers = Marshal.AllocHGlobal(Marshal.SizeOf(ThisSecBuffer));
                Marshal.StructureToPtr(ThisSecBuffer, pBuffers, false);
            }

            public SecBufferDesc(MultipleSecBufferHelper[] secBufferBytesArray)
            {
                if (secBufferBytesArray == null || secBufferBytesArray.Length == 0)
                {
                    throw new ArgumentException("secBufferBytesArray cannot be null or 0 length");
                }

                ulVersion = (int)SecBufferType.SECBUFFER_VERSION;
                cBuffers = secBufferBytesArray.Length;

                //Allocate memory for SecBuffer Array....
                pBuffers = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SecBuffer)) * cBuffers);

                for (int Index = 0; Index < secBufferBytesArray.Length; Index++)
                {
                    //Super hack: Now allocate memory for the individual SecBuffers
                    //and just copy the bit values to the SecBuffer array!!!
                    SecBuffer ThisSecBuffer = new SecBuffer(secBufferBytesArray[Index].Buffer, secBufferBytesArray[Index].BufferType);

                    //We will write out bits in the following order:
                    //int cbBuffer;
                    //int BufferType;
                    //pvBuffer;
                    //Note that we won't be releasing the memory allocated by ThisSecBuffer until we
                    //are disposed...
                    int CurrentOffset = Index * Marshal.SizeOf(typeof(SecBuffer));
                    Marshal.WriteInt32(pBuffers, CurrentOffset, ThisSecBuffer.cbBuffer);
                    Marshal.WriteInt32(pBuffers, CurrentOffset + Marshal.SizeOf(ThisSecBuffer.cbBuffer), ThisSecBuffer.BufferType);
                    Marshal.WriteIntPtr(pBuffers, CurrentOffset + Marshal.SizeOf(ThisSecBuffer.cbBuffer) + Marshal.SizeOf(ThisSecBuffer.BufferType), ThisSecBuffer.pvBuffer);
                }
            }

            public void Dispose()
            {
                if (pBuffers != IntPtr.Zero)
                {
                    if (cBuffers == 1)
                    {
                        SecBuffer ThisSecBuffer = (SecBuffer)Marshal.PtrToStructure(pBuffers, typeof(SecBuffer));
                        ThisSecBuffer.Dispose();
                    }
                    else
                    {
                        for (int Index = 0; Index < cBuffers; Index++)
                        {
                            //The bits were written out the following order:
                            //int cbBuffer;
                            //int BufferType;
                            //pvBuffer;
                            //What we need to do here is to grab a hold of the pvBuffer allocate by the individual
                            //SecBuffer and release it...
                            int CurrentOffset = Index * Marshal.SizeOf(typeof(SecBuffer));
                            IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers, CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int)));
                            Marshal.FreeHGlobal(SecBufferpvBuffer);
                        }
                    }

                    Marshal.FreeHGlobal(pBuffers);
                    pBuffers = IntPtr.Zero;
                }
            }

            public byte[] GetSecBufferByteArray()
            {
                byte[] Buffer = null;

                if (pBuffers == IntPtr.Zero)
                {
                    throw new InvalidOperationException("Object has already been disposed!!!");
                }

                if (cBuffers == 1)
                {
                    SecBuffer ThisSecBuffer = (SecBuffer)Marshal.PtrToStructure(pBuffers, typeof(SecBuffer));

                    if (ThisSecBuffer.cbBuffer > 0)
                    {
                        Buffer = new byte[ThisSecBuffer.cbBuffer];
                        Marshal.Copy(ThisSecBuffer.pvBuffer, Buffer, 0, ThisSecBuffer.cbBuffer);
                    }
                }
                else
                {
                    int BytesToAllocate = 0;

                    for (int Index = 0; Index < cBuffers; Index++)
                    {
                        //The bits were written out the following order:
                        //int cbBuffer;
                        //int BufferType;
                        //pvBuffer;
                        //What we need to do here calculate the total number of bytes we need to copy...
                        int CurrentOffset = Index * Marshal.SizeOf(typeof(SecBuffer));
                        BytesToAllocate += Marshal.ReadInt32(pBuffers, CurrentOffset);
                    }

                    Buffer = new byte[BytesToAllocate];

                    for (int Index = 0, BufferIndex = 0; Index < cBuffers; Index++)
                    {
                        //The bits were written out the following order:
                        //int cbBuffer;
                        //int BufferType;
                        //pvBuffer;
                        //Now iterate over the individual buffers and put them together into a
                        //byte array...
                        int CurrentOffset = Index * Marshal.SizeOf(typeof(SecBuffer));
                        int BytesToCopy = Marshal.ReadInt32(pBuffers, CurrentOffset);
                        IntPtr SecBufferpvBuffer = Marshal.ReadIntPtr(pBuffers, CurrentOffset + Marshal.SizeOf(typeof(int)) + Marshal.SizeOf(typeof(int)));
                        Marshal.Copy(SecBufferpvBuffer, Buffer, BufferIndex, BytesToCopy);
                        BufferIndex += BytesToCopy;
                    }
                }

                return (Buffer);
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SECURITY_INTEGER
        {
            public uint LowPart;
            public int HighPart;
            public SECURITY_INTEGER(int dummy)
            {
                LowPart = 0;
                HighPart = 0;
            }
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct SECURITY_HANDLE
        {
            public IntPtr LowPart;
            public IntPtr HighPart;
            public SECURITY_HANDLE(int dummy)
            {
                LowPart = HighPart = IntPtr.Zero;
            }
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct SecPkgContext_Sizes
        {
            public uint cbMaxToken;
            public uint cbMaxSignature;
            public uint cbBlockSize;
            public uint cbSecurityTrailer;
        };

        // taken from https://github.com/tevora-threat/SharpView
        [StructLayout(LayoutKind.Sequential)]
        public class NetResource
        {
            public ResourceScope Scope;
            public ResourceType ResourceType;
            public ResourceDisplaytype DisplayType;
            public int Usage;
            public string LocalName;
            public string RemoteName;
            public string Comment;
            public string Provider;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_EXTENSIONS_INT
        {
            public UInt32 cb;
            public UInt32 dwFlags;
            public Guid SiteObjGuid;
            public UInt32 Pid;
            public UInt32 dwReplEpoch;
            public UInt32 dwFlagsExt;
            public Guid ConfigObjGUID;
            public UInt32 dwExtCaps;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_MSG_DCINFOREQ_V1
        {
            public IntPtr Domain;
            public UInt32 InfoLevel;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_MSG_DCINFOREPLY_V2
        {
            public UInt32 cItems;
            public IntPtr rItems;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DS_DOMAIN_CONTROLLER_INFO_2W
        {
            public IntPtr NetbiosName;
            public IntPtr DnsHostName;
            public IntPtr SiteName;
            public IntPtr SiteObjectName;
            public IntPtr ComputerObjectName;
            public IntPtr ServerObjectName;
            public IntPtr NtdsDsaObjectName;
            public UInt32 fIsPdc;
            public UInt32 fDsEnabled;
            public UInt32 fIsGc;
            public Guid SiteObjectGuid;
            public Guid ComputerObjectGuid;
            public Guid ServerObjectGuid;
            public Guid NtdsDsaObjectGuid;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct USN_VECTOR
        {
            public long usnHighObjUpdate;
            public long usnReserved;
            public long usnHighPropUpdate;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct SCHEMA_PREFIX_TABLE
        {
            public UInt32 PrefixCount;
            public IntPtr pPrefixEntry;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DSNAME
        {
            public UInt32 structLen;
            public UInt32 SidLen;
            public Guid Guid;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 28)]
            public byte[] Sid;
            public UInt32 NameLen;
            public byte StringName;
        };
        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_MSG_GETCHGREQ_V8
        {
            public Guid uuidDsaObjDest;
            public Guid uuidInvocIdSrc;
            public IntPtr pNC;
            public USN_VECTOR usnvecFrom;
            public IntPtr pUpToDateVecDest;
            public UInt32 ulFlags;
            public UInt32 cMaxObjects;
            public UInt32 cMaxBytes;
            public UInt32 ulExtendedOp;
            public ulong liFsmoInfo;
            public IntPtr pPartialAttrSet;
            public IntPtr pPartialAttrSetEx;
            public SCHEMA_PREFIX_TABLE PrefixTableDest;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_MSG_GETCHGREPLY_V6
        {
            public Guid uuidDsaObjSrc;
            public Guid uuidInvocIdSrc;
            public IntPtr pNC;
            public USN_VECTOR usnvecFrom;
            public USN_VECTOR usnvecTo;
            public IntPtr pUpToDateVecSrc;
            public SCHEMA_PREFIX_TABLE PrefixTableSrc;
            public UInt32 ulExtendedRet;
            public UInt32 cNumObjects;
            public UInt32 cNumBytes;
            public IntPtr pObjects;
            public UInt32 fMoreData;
            public UInt32 cNumNcSizeObjects;
            public UInt32 cNumNcSizeValues;
            public UInt32 cNumValues;
            public IntPtr rgValues;
            public UInt32 dwDRSError;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DRS_MSG_CRACKREQ_V1
        {
            public UInt32 CodePage;
            public UInt32 LocaleId;
            public UInt32 dwFlags;
            public UInt32 formatOffered;
            public UInt32 formatDesired;
            public UInt32 cNames;
            public IntPtr rpNames;
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct DS_NAME_RESULT_ITEMW
        {
            public UInt32 status;
            public IntPtr pDomain;
            public IntPtr pName;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct DS_NAME_RESULTW
        {
            public UInt32 cItems;
            public IntPtr rItems;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct ATTRVAL
        {
            public UInt32 valLen;
            public IntPtr pVal;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct ATTRVALBLOCK
        {
            public UInt32 valCount;
            public IntPtr pAVal;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct ATTR
        {
            public UInt32 attrTyp;
            public ATTRVALBLOCK AttrVal;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct ATTRBLOCK
        {
            public UInt32 attrCount;
            public IntPtr pAttr;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct ENTINF
        {
            public IntPtr pName;
            public UInt32 ulFlags;
            public ATTRBLOCK AttrBlock;
        };
        [StructLayout(LayoutKind.Sequential)]
        public struct REPLENTINFLIST
        {
            public IntPtr pNextEntInf;
            public ENTINF Entinf;
            public UInt32 fIsNCPrefix;
            public IntPtr pParentGuid;
            public IntPtr pMetaDataExt;
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct SEC_WINNT_AUTH_IDENTITY
        {
            public string User;
            public int UserLength;
            public string Domain;
            public int DomainLength;
            public string Password;
            public int PasswordLength;
            public int Flags;

            public SEC_WINNT_AUTH_IDENTITY(string user, string domain, string password)
            {
                User = user;
                UserLength = User.Length;
                Domain = domain;
                DomainLength = Domain.Length;
                Password = password;
                PasswordLength = Password.Length;
                Flags = (int)SEC_WINNT_AUTH_IDENTITY_FLAGS.UNICODE; //SEC_WINNT_AUTH_IDENTITY_UNICODE
            }

            public IntPtr ToPointer()
            {
                var result = Marshal.AllocHGlobal(Marshal.SizeOf(this));
                Marshal.StructureToPtr(this, result, false);
                return result;
            }

            public void FreePointer(IntPtr ptr)
            {
                Marshal.DestroyStructure<SEC_WINNT_AUTH_IDENTITY>(ptr);
                Marshal.FreeHGlobal(ptr);
            }
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct USER_PROPERTY
        {
            public UInt16 NameLength;
            public UInt16 ValueLength;
            public UInt16 Reserved;
            public string PropertyName;
            public Object PropertyValue;

            public USER_PROPERTY(UInt16 nameLength, UInt16 valueLength, UInt16 reserved, string propertyName, Object propertyValue)
            {
                NameLength = nameLength;
                ValueLength = valueLength;
                Reserved = reserved;
                PropertyName = propertyName;
                PropertyValue = propertyValue;
            }
        }
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct USER_PROPERTIES
        {
            public UInt32 Reserved1;
            public UInt32 Length;
            public UInt16 Reserved2;
            public UInt16 Reserved3;
            public byte[] Reserved4;
            public string PropertySignature;
            public UInt16 PropertyCount;
            public USER_PROPERTY[] UserProperties;
            public byte Reserved5;

            public USER_PROPERTIES(byte[] data, byte[] userSID)
            {
                var stream = new MemoryStream(data);
                var br = new BinaryReader(stream);
                Reserved1 = br.ReadUInt32();
                Length = br.ReadUInt32();
                Reserved2 = br.ReadUInt16();
                Reserved3 = br.ReadUInt16();
                Reserved4 = br.ReadBytes(96);
                PropertySignature = Encoding.Unicode.GetString(br.ReadBytes(2));
                PropertyCount = br.ReadUInt16();

                UserProperties = new USER_PROPERTY[PropertyCount];
                for (int i = 0; i < PropertyCount; i++)
                {
                    var nameLength = br.ReadUInt16();
                    var valueLength = br.ReadUInt16();
                    var reserved = br.ReadUInt16();
                    var propertyName = Encoding.Unicode.GetString(br.ReadBytes(nameLength));
                    Object propertyValue;
                    if (propertyName.Equals("Primary:Kerberos-Newer-Keys"))
                    {
                        var rawPropertyValue = new KERB_STORED_CREDENTIAL_NEW(Helpers.StringToByteArray(Encoding.UTF8.GetString(br.ReadBytes(valueLength)).ToString()));
                        KERB_NEWER_KEYS tmpPropertyValue = new KERB_NEWER_KEYS();
                        tmpPropertyValue.DefaultSalt = rawPropertyValue.DefaultSalt;
                        tmpPropertyValue.DefaultIterations = rawPropertyValue.DefaultIterationCount;
                        tmpPropertyValue.Credentials = new KERB_NEWER_KEYS_DATA[rawPropertyValue.CredentialCount];
                        tmpPropertyValue.CredentialCount = rawPropertyValue.CredentialCount;
                        for (int c = 0; c < rawPropertyValue.CredentialCount; c++)
                        {
                            tmpPropertyValue.Credentials[c].KeyType = rawPropertyValue.Credentials[c].KeyType;
                            tmpPropertyValue.Credentials[c].IterationCount = rawPropertyValue.Credentials[c].IterationCount;

                            var credStream = new MemoryStream(rawPropertyValue.KeyValues);
                            var credBr = new BinaryReader(credStream);
                            // set position of stream to start of key for this credential
                            credStream.Position = (long)rawPropertyValue.Credentials[c].KeyOffset - (long)rawPropertyValue.KeyStartPosition;
                            // read bytes for length of key
                            tmpPropertyValue.Credentials[c].Key = credBr.ReadBytes((int)rawPropertyValue.Credentials[c].KeyLength);
                        }
                        tmpPropertyValue.ServiceCredentials = new KERB_NEWER_KEYS_DATA[rawPropertyValue.ServiceCredentialCount];
                        tmpPropertyValue.ServiceCredentialCount = rawPropertyValue.ServiceCredentialCount;
                        for (int c = 0; c < rawPropertyValue.ServiceCredentialCount; c++)
                        {
                            tmpPropertyValue.ServiceCredentials[c].KeyType = rawPropertyValue.ServiceCredentials[c].KeyType;
                            tmpPropertyValue.ServiceCredentials[c].IterationCount = rawPropertyValue.ServiceCredentials[c].IterationCount;

                            var credStream = new MemoryStream(rawPropertyValue.KeyValues);
                            var credBr = new BinaryReader(credStream);
                            // set position of stream to start of key for this credential
                            credStream.Position = (long)rawPropertyValue.ServiceCredentials[c].KeyOffset - (long)rawPropertyValue.KeyStartPosition;
                            // read bytes for length of key
                            tmpPropertyValue.ServiceCredentials[c].Key = credBr.ReadBytes((int)rawPropertyValue.ServiceCredentials[c].KeyLength);
                        }
                        tmpPropertyValue.OldCredentials = new KERB_NEWER_KEYS_DATA[rawPropertyValue.OldCredentialCount];
                        tmpPropertyValue.OldCredentialCount = rawPropertyValue.OldCredentialCount;
                        for (int c = 0; c < rawPropertyValue.OldCredentialCount; c++)
                        {
                            tmpPropertyValue.OldCredentials[c].KeyType = rawPropertyValue.OldCredentials[c].KeyType;
                            tmpPropertyValue.OldCredentials[c].IterationCount = rawPropertyValue.OldCredentials[c].IterationCount;

                            var credStream = new MemoryStream(rawPropertyValue.KeyValues);
                            var credBr = new BinaryReader(credStream);
                            // set position of stream to start of key for this credential
                            credStream.Position = (long)rawPropertyValue.OldCredentials[c].KeyOffset - (long)rawPropertyValue.KeyStartPosition;
                            // read bytes for length of key
                            tmpPropertyValue.OldCredentials[c].Key = credBr.ReadBytes((int)rawPropertyValue.OldCredentials[c].KeyLength);
                        }
                        tmpPropertyValue.OlderCredentials = new KERB_NEWER_KEYS_DATA[rawPropertyValue.OlderCredentialCount];
                        tmpPropertyValue.OlderCredentialCount = rawPropertyValue.OlderCredentialCount;
                        for (int c = 0; c < rawPropertyValue.OlderCredentialCount; c++)
                        {
                            tmpPropertyValue.OlderCredentials[c].KeyType = rawPropertyValue.OlderCredentials[c].KeyType;
                            tmpPropertyValue.OlderCredentials[c].IterationCount = rawPropertyValue.OlderCredentials[c].IterationCount;

                            var credStream = new MemoryStream(rawPropertyValue.KeyValues);
                            var credBr = new BinaryReader(credStream);
                            // set position of stream to start of key for this credential
                            credStream.Position = (long)rawPropertyValue.OlderCredentials[c].KeyOffset - (long)rawPropertyValue.KeyStartPosition;
                            // read bytes for length of key
                            tmpPropertyValue.OlderCredentials[c].Key = credBr.ReadBytes((int)rawPropertyValue.OlderCredentials[c].KeyLength);
                        }
                        propertyValue = tmpPropertyValue;
                    }
                    else if (propertyName.Equals("Primary:NTLM-Strong-NTOWF"))
                        propertyValue = Encoding.UTF8.GetString(br.ReadBytes(valueLength));
                    else
                        propertyValue = br.ReadBytes(valueLength);

                    UserProperties[i] = new USER_PROPERTY(nameLength, valueLength, reserved, propertyName, propertyValue);
                }
                Reserved5 = br.ReadByte();
            }
        }
        [StructLayout(LayoutKind.Sequential)]
        [Serializable]
        public struct KERB_KEY_DATA_NEW
        {
            public UInt16 Reserverd1;
            public UInt16 Reserverd2;
            public UInt32 Reserverd3;
            public UInt32 IterationCount;
            public Int32 KeyType;
            public UInt32 KeyLength;
            public UInt32 KeyOffset;

            public KERB_KEY_DATA_NEW(UInt16 reserved1, UInt16 reserved2, UInt32 reserved3, UInt32 iterationCount, Int32 keyType, UInt32 keyLength, UInt32 keyOffset)
            {
                Reserverd1 = reserved1;
                Reserverd2 = reserved2;
                Reserverd3 = reserved3;
                IterationCount = iterationCount;
                KeyType = keyType;
                KeyLength = keyLength;
                KeyOffset = keyOffset;
            }
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_STORED_CREDENTIAL_NEW
        {
            public UInt16 Revision;
            public UInt16 Flags;
            public UInt16 CredentialCount;
            public UInt16 ServiceCredentialCount;
            public UInt16 OldCredentialCount;
            public UInt16 OlderCredentialCount;
            public UInt16 DefaultSaltLength;
            public UInt16 DefaultSaltMaximumLength;
            public UInt32 DefaultSaltOffset;
            public UInt32 DefaultIterationCount;
            public KERB_KEY_DATA_NEW[] Credentials;
            public KERB_KEY_DATA_NEW[] ServiceCredentials;
            public KERB_KEY_DATA_NEW[] OldCredentials;
            public KERB_KEY_DATA_NEW[] OlderCredentials;
            public string DefaultSalt;
            public byte[] KeyValues;
            // added to calculate the correct position of keys within the KeyValues field
            public Int32 KeyStartPosition;

            public KERB_STORED_CREDENTIAL_NEW(byte[] data)
            {
                var stream = new MemoryStream(data);
                var br = new BinaryReader(stream);
                Revision = br.ReadUInt16();
                Flags = br.ReadUInt16();
                CredentialCount = br.ReadUInt16();
                ServiceCredentialCount = br.ReadUInt16();
                OldCredentialCount = br.ReadUInt16();
                OlderCredentialCount = br.ReadUInt16();
                DefaultSaltLength = br.ReadUInt16();
                DefaultSaltMaximumLength = br.ReadUInt16();
                DefaultSaltOffset = br.ReadUInt32();
                DefaultIterationCount = br.ReadUInt32();

                var formatter = new BinaryFormatter();
                Credentials = new KERB_KEY_DATA_NEW[CredentialCount];
                for (int i = 0; i < CredentialCount; i++)
                {
                    UInt16 reserved1 = br.ReadUInt16();
                    UInt16 reversed2 = br.ReadUInt16();
                    UInt32 reversed3 = br.ReadUInt32();
                    UInt32 iterationCount = br.ReadUInt32();
                    Int32 keyType = br.ReadInt32();
                    UInt32 keyLength = br.ReadUInt32();
                    UInt32 keyOffset = br.ReadUInt32();

                    Credentials[i] = new KERB_KEY_DATA_NEW(reserved1, reversed2, reversed3, iterationCount, keyType, keyLength, keyOffset);
                }
                ServiceCredentials = new KERB_KEY_DATA_NEW[ServiceCredentialCount];
                for (int i = 0; i < ServiceCredentialCount; i++)
                {
                    UInt16 reserved1 = br.ReadUInt16();
                    UInt16 reversed2 = br.ReadUInt16();
                    UInt32 reversed3 = br.ReadUInt32();
                    UInt32 iterationCount = br.ReadUInt32();
                    Int32 keyType = br.ReadInt32();
                    UInt32 keyLength = br.ReadUInt32();
                    UInt32 keyOffset = br.ReadUInt32();

                    ServiceCredentials[i] = new KERB_KEY_DATA_NEW(reserved1, reversed2, reversed3, iterationCount, keyType, keyLength, keyOffset);
                }
                OldCredentials = new KERB_KEY_DATA_NEW[OldCredentialCount];
                for (int i = 0; i < OldCredentialCount; i++)
                {
                    UInt16 reserved1 = br.ReadUInt16();
                    UInt16 reversed2 = br.ReadUInt16();
                    UInt32 reversed3 = br.ReadUInt32();
                    UInt32 iterationCount = br.ReadUInt32();
                    Int32 keyType = br.ReadInt32();
                    UInt32 keyLength = br.ReadUInt32();
                    UInt32 keyOffset = br.ReadUInt32();

                    OldCredentials[i] = new KERB_KEY_DATA_NEW(reserved1, reversed2, reversed3, iterationCount, keyType, keyLength, keyOffset);
                }
                OlderCredentials = new KERB_KEY_DATA_NEW[OlderCredentialCount];
                for (int i = 0; i < OlderCredentialCount; i++)
                {
                    UInt16 reserved1 = br.ReadUInt16();
                    UInt16 reversed2 = br.ReadUInt16();
                    UInt32 reversed3 = br.ReadUInt32();
                    UInt32 iterationCount = br.ReadUInt32();
                    Int32 keyType = br.ReadInt32();
                    UInt32 keyLength = br.ReadUInt32();
                    UInt32 keyOffset = br.ReadUInt32();

                    OlderCredentials[i] = new KERB_KEY_DATA_NEW(reserved1, reversed2, reversed3, iterationCount, keyType, keyLength, keyOffset);
                }

                stream.Position = DefaultSaltOffset;
                DefaultSalt = Encoding.Unicode.GetString(br.ReadBytes((int)DefaultSaltLength));
                br.ReadBytes((int)(DefaultSaltMaximumLength - DefaultSaltLength));

                KeyStartPosition = (Int32)stream.Position;

                KeyValues = br.ReadBytes(data.Length - KeyStartPosition);
            }
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_NEWER_KEYS
        {
            public string DefaultSalt;
            public UInt32 DefaultIterations;
            public UInt32 CredentialCount;
            public KERB_NEWER_KEYS_DATA[] Credentials;
            public UInt32 ServiceCredentialCount;
            public KERB_NEWER_KEYS_DATA[] ServiceCredentials;
            public UInt32 OldCredentialCount;
            public KERB_NEWER_KEYS_DATA[] OldCredentials;
            public UInt32 OlderCredentialCount;
            public KERB_NEWER_KEYS_DATA[] OlderCredentials;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct KERB_NEWER_KEYS_DATA
        {
            public UInt64 IterationCount;
            public Int64 KeyType;
            public byte[] Key;
        }




        // functions
        // Adapted from Vincent LE TOUX' "MakeMeEnterpriseAdmin"
        [DllImport("cryptdll.Dll", CharSet = CharSet.Auto, SetLastError = false)]
        public static extern int CDLocateCSystem(KERB_ETYPE type, out IntPtr pCheckSum);

        [DllImport("cryptdll.Dll", CharSet = CharSet.Auto, SetLastError = false)]
        public static extern int CDLocateCheckSum(KERB_CHECKSUM_ALGORITHM type, out IntPtr pCheckSum);

        //  https://github.com/vletoux/MakeMeEnterpriseAdmin/blob/master/MakeMeEnterpriseAdmin.ps1#L1753-L1767
        public delegate int KERB_ECRYPT_Initialize(byte[] Key, int KeySize, int KeyUsage, out IntPtr pContext);
        public delegate int KERB_ECRYPT_Encrypt(IntPtr pContext, byte[] data, int dataSize, byte[] output, ref int outputSize);
        public delegate int KERB_ECRYPT_Decrypt(IntPtr pContext, byte[] data, int dataSize, byte[] output, ref int outputSize);
        public delegate int KERB_ECRYPT_Finish(ref IntPtr pContext);

        public delegate int KERB_ECRYPT_HashPassword(UNICODE_STRING Password, UNICODE_STRING Salt, int count, byte[] output);

        //https://github.com/vletoux/MakeMeEnterpriseAdmin/blob/master/MakeMeEnterpriseAdmin.ps1#L1760-L1767
        public delegate int KERB_CHECKSUM_Initialize(int unk0, out IntPtr pContext);
        public delegate int KERB_CHECKSUM_Sum(IntPtr pContext, int Size, byte[] Buffer);
        public delegate int KERB_CHECKSUM_Finalize(IntPtr pContext, byte[] Buffer);
        public delegate int KERB_CHECKSUM_Finish(ref IntPtr pContext);
        public delegate int KERB_CHECKSUM_InitializeEx(byte[] Key, int KeySize, int KeyUsage, out IntPtr pContext);


        [DllImport("Netapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern int DsGetDcName(
            [MarshalAs(UnmanagedType.LPTStr)] string ComputerName,
            [MarshalAs(UnmanagedType.LPTStr)] string DomainName,
            [In] int DomainGuid,
            [MarshalAs(UnmanagedType.LPTStr)] string SiteName,
            [MarshalAs(UnmanagedType.U4)] DSGETDCNAME_FLAGS flags,
            out IntPtr pDOMAIN_CONTROLLER_INFO);

        [DllImport("Netapi32.dll", SetLastError = true)]
        public static extern int NetApiBufferFree(IntPtr Buffer);

        [DllImport("kernel32.dll")]
        public extern static void GetSystemTime(ref SYSTEMTIME lpSystemTime);

        // LSA functions

        [DllImport("secur32.dll", SetLastError = false)]
        public static extern int LsaConnectUntrusted(
            [Out] out IntPtr LsaHandle
        );

        [DllImport("secur32.dll", SetLastError = false)]
        public static extern int LsaLookupAuthenticationPackage(
            [In] IntPtr LsaHandle,
            [In] ref LSA_STRING_IN PackageName,
            [Out] out int AuthenticationPackage
        );

        [DllImport("kernel32.dll")]
        public static extern IntPtr LocalAlloc(
            uint uFlags,
            uint uBytes
        );

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern uint LsaNtStatusToWinError(
            uint status
        );

        [DllImport("advapi32.dll", SetLastError = true, PreserveSig = true)]
        public static extern uint LsaFreeMemory(
            IntPtr buffer
        );

        [DllImport("kernel32.dll", EntryPoint = "CopyMemory", SetLastError = false)]
        public static extern void CopyMemory(
            IntPtr dest,
            IntPtr src,
            uint count
        );

        [DllImport("secur32.dll", SetLastError = false)]
        public static extern int LsaCallAuthenticationPackage(
            IntPtr LsaHandle,
            int AuthenticationPackage,
            IntPtr ProtocolSubmitBuffer,
            int SubmitBufferLength,
            out IntPtr ProtocolReturnBuffer,
            out int ReturnBufferLength,
            out int ProtocolStatus
        );

        [DllImport("secur32.dll", SetLastError = false)]
        public static extern int LsaDeregisterLogonProcess(
            [In] IntPtr LsaHandle
        );

        [DllImport("secur32.dll", SetLastError = true)]
        public static extern int LsaRegisterLogonProcess(
            ref LSA_STRING_IN LogonProcessName,
            out IntPtr LsaHandle,
            out ulong SecurityMode
        );

        // for GetSystem()
        [DllImport("advapi32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool OpenProcessToken(
            IntPtr ProcessHandle,
            UInt32 DesiredAccess,
            out IntPtr TokenHandle);

        [DllImport("advapi32.dll")]
        public static extern bool DuplicateToken(
            IntPtr ExistingTokenHandle,
            int SECURITY_IMPERSONATION_LEVEL,
            ref IntPtr DuplicateTokenHandle);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool ImpersonateLoggedOnUser(
            IntPtr hToken);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool RevertToSelf();

        [DllImport("kernel32.dll")]
        public static extern uint GetLastError();

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool GetTokenInformation(
            IntPtr TokenHandle,
            TOKEN_INFORMATION_CLASS TokenInformationClass,
            IntPtr TokenInformation,
            int TokenInformationLength,
            out int ReturnLength);

        [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        public static extern bool CreateProcessWithLogonW(
            String userName,
            String domain,
            String password,
            UInt32 logonFlags,
            String applicationName,
            String commandLine,
            UInt32 creationFlags,
            UInt32 environment,
            String currentDirectory,
            ref STARTUPINFO startupInfo,
            out PROCESS_INFORMATION processInformation);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool CloseHandle(
            IntPtr hObject
        );

        [DllImport("Secur32.dll", SetLastError = false)]
        public static extern int LsaEnumerateLogonSessions(
            out UInt64 LogonSessionCount,
            out IntPtr LogonSessionList
        );

        [DllImport("Secur32.dll", SetLastError = false)]
        public static extern uint LsaGetLogonSessionData(
            IntPtr luid,
            out IntPtr ppLogonSessionData
        );

        [DllImport("secur32.dll", SetLastError = false)]
        public static extern uint LsaFreeReturnBuffer(
            IntPtr buffer
        );

        // adapted from https://www.pinvoke.net/default.aspx/secur32.InitializeSecurityContext
        [DllImport("secur32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern int AcquireCredentialsHandle(
            string pszPrincipal, //SEC_CHAR*
            string pszPackage, //SEC_CHAR* //"Kerberos","NTLM","Negotiative"
            int fCredentialUse,
            IntPtr PAuthenticationID,//_LUID AuthenticationID,//pvLogonID,//PLUID
            IntPtr pAuthData,//PVOID
            int pGetKeyFn, //SEC_GET_KEY_FN
            IntPtr pvGetKeyArgument, //PVOID
            ref SECURITY_HANDLE phCredential, //SecHandle //PCtxtHandle ref
            ref SECURITY_INTEGER ptsExpiry  //PTimeStamp //TimeStamp ref
        );

        [DllImport("secur32.dll", SetLastError = true)]
        public static extern int InitializeSecurityContext(
            ref SECURITY_HANDLE phCredential,//PCredHandle
            IntPtr phContext, //PCtxtHandle
            string pszTargetName,
            int fContextReq,
            int Reserved1,
            int TargetDataRep,
            IntPtr pInput, //PSecBufferDesc SecBufferDesc
            int Reserved2,
            out SECURITY_HANDLE phNewContext, //PCtxtHandle
            out SecBufferDesc pOutput, //PSecBufferDesc SecBufferDesc
            out uint pfContextAttr, //managed ulong == 64 bits!!!
            out SECURITY_INTEGER ptsExpiry  //PTimeStamp
        );

        [DllImport("secur32.dll")]
        public static extern int DeleteSecurityContext(
            ref SECURITY_HANDLE phContext
        );

        [DllImport("secur32.dll", CharSet = CharSet.Auto)]
        public static extern int FreeCredentialsHandle(
            [In] ref SECURITY_HANDLE phCredential
        );

        [DllImport("Secur32.dll")]
        public static extern int FreeContextBuffer(
            ref IntPtr pvContextBuffer
        );

        // taken from https://github.com/tevora-threat/SharpView
        [DllImport("mpr.dll")]
        public static extern int WNetAddConnection2(NetResource netResource,
            string password, string username, int flags);

        [DllImport("mpr.dll")]
        public static extern int WNetCancelConnection2(string name, int flags,
            bool force);

        [DllImport("Rpcrt4.dll", EntryPoint = "RpcBindingFromStringBindingW",
        CallingConvention = CallingConvention.StdCall,
        CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern Int32 RpcBindingFromStringBinding(String bindingString, out IntPtr lpBinding);
        [DllImport("Rpcrt4.dll", EntryPoint = "NdrClientCall2", CallingConvention = CallingConvention.Cdecl,
            CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern IntPtr NdrClientCall2x64(IntPtr pMIDL_STUB_DESC, IntPtr formatString, __arglist);
        [DllImport("Rpcrt4.dll", EntryPoint = "NdrClientCall2", CallingConvention = CallingConvention.Cdecl,
            CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern IntPtr NdrClientCall2x86(IntPtr pMIDL_STUB_DESC, IntPtr formatString, IntPtr args);
        [DllImport("Rpcrt4.dll", EntryPoint = "RpcBindingFree", CallingConvention = CallingConvention.StdCall,
            CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern Int32 RpcBindingFree(ref IntPtr lpString);
        //#region RpcStringBindingCompose
        [DllImport("Rpcrt4.dll", EntryPoint = "RpcStringBindingComposeW", CallingConvention = CallingConvention.StdCall,
            CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern Int32 RpcStringBindingCompose(
            String ObjUuid, String ProtSeq, String NetworkAddr, String Endpoint, String Options,
            out IntPtr lpBindingString
            );
        [StructLayout(LayoutKind.Sequential)]
        public struct RPC_SECURITY_QOS
        {
            public Int32 Version;
            public Int32 Capabilities;
            public Int32 IdentityTracking;
            public Int32 ImpersonationType;
        };
        [DllImport("Rpcrt4.dll", EntryPoint = "RpcBindingSetAuthInfoExW", CallingConvention = CallingConvention.StdCall,
            CharSet = CharSet.Unicode, SetLastError = false)]
        public static extern Int32 RpcBindingSetAuthInfoEx(IntPtr lpBinding, string ServerPrincName,
                                            UInt32 AuthnLevel, UInt32 AuthnSvc, IntPtr identity, UInt32 AuthzSvc, ref RPC_SECURITY_QOS SecurityQOS);
        [DllImport("Rpcrt4.dll", EntryPoint = "RpcBindingSetOption", CallingConvention = CallingConvention.StdCall, SetLastError = false)]
        public static extern Int32 RpcBindingSetOption(IntPtr Binding, UInt32 Option, IntPtr OptionValue);
        [DllImport("Rpcrt4.dll", EntryPoint = "I_RpcBindingInqSecurityContext", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        public static extern Int32 I_RpcBindingInqSecurityContext(IntPtr Binding, out IntPtr SecurityContextHandle);
        [StructLayout(LayoutKind.Sequential)]
        public struct SecPkgContext_SessionKey
        {
            public UInt32 SessionKeyLength;
            public IntPtr SessionKey;
        }
        [DllImport("secur32.Dll", CharSet = CharSet.Auto, SetLastError = false)]
        public static extern int QueryContextAttributes(IntPtr hContext,
                                                        uint ulAttribute,
                                                        ref SecPkgContext_SessionKey pContextAttributes);
        [StructLayout(LayoutKind.Sequential)]
        public struct CRYPTO_BUFFER
        {
            public UInt32 Length;
            public UInt32 MaximumLength;
            public IntPtr Buffer;
        }
        [DllImport("advapi32.Dll", CharSet = CharSet.Auto, SetLastError = false, EntryPoint = "SystemFunction032")]
        public static extern int SystemFunction032(ref CRYPTO_BUFFER data, ref CRYPTO_BUFFER key);
        public static byte[] RtlEncryptDecryptRC4(byte[] input, byte[] key)
        {
            CRYPTO_BUFFER inputBuffer = new CRYPTO_BUFFER();
            inputBuffer.Length = inputBuffer.MaximumLength = (UInt32)input.Length;
            inputBuffer.Buffer = Marshal.AllocHGlobal(input.Length);
            Marshal.Copy(input, 0, inputBuffer.Buffer, input.Length);
            CRYPTO_BUFFER keyBuffer = new CRYPTO_BUFFER();
            keyBuffer.Length = keyBuffer.MaximumLength = (UInt32)key.Length;
            keyBuffer.Buffer = Marshal.AllocHGlobal(key.Length);
            Marshal.Copy(key, 0, keyBuffer.Buffer, key.Length);
            int ret = SystemFunction032(ref inputBuffer, ref keyBuffer);
            byte[] output = new byte[inputBuffer.Length];
            Marshal.Copy(inputBuffer.Buffer, output, 0, output.Length);
            Marshal.FreeHGlobal(inputBuffer.Buffer);
            Marshal.FreeHGlobal(keyBuffer.Buffer);
            return output;
        }
        [DllImport("advapi32.dll", SetLastError = true, EntryPoint = "SystemFunction027")]
        public static extern int RtlDecryptDES2blocks1DWORD(byte[] data, ref UInt32 key, IntPtr output);
        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern IntPtr GetSidSubAuthority(IntPtr sid, UInt32 subAuthorityIndex);
        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern IntPtr GetSidSubAuthorityCount(IntPtr psid);
    }
}
